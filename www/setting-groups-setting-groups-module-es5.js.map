{"version":3,"sources":["webpack:///src/app/setting-groups/setting-groups-form/setting-groups-form.component.html","webpack:///src/app/setting-groups/setting-groups-list/setting-groups-list.component.html","webpack:///src/app/setting-groups/setting-groups-modal/setting-groups-modal.component.html","webpack:///src/app/setting-groups/setting-groups.page.html","webpack:///src/app/setting-groups/setting-groups-form/setting-groups-form.component.scss","webpack:///src/app/setting-groups/setting-groups-form/setting-groups-form.component.ts","webpack:///src/app/setting-groups/setting-groups-list/setting-groups-list.component.scss","webpack:///src/app/setting-groups/setting-groups-list/setting-groups-list.component.ts","webpack:///src/app/setting-groups/setting-groups-modal/setting-groups-modal.component.scss","webpack:///src/app/setting-groups/setting-groups-modal/setting-groups-modal.component.ts","webpack:///src/app/setting-groups/setting-groups-routing.module.ts","webpack:///src/app/setting-groups/setting-groups.module.ts","webpack:///src/app/setting-groups/setting-groups.page.scss","webpack:///src/app/setting-groups/setting-groups.page.ts","webpack:///src/app/setting-groups/setting-groups.service.ts"],"names":["SettingGroupsFormComponent","settingGroupsService","validationMessages","type","message","selector","template","SettingGroupsListComponent","modalController","getSettingGroups","action","create","component","componentProps","modal","onDidDismiss","then","dataReturned","data","console","table","present","SettingGroupsModalComponent","navParams","onClosedData","dismiss","routes","path","SettingGroupsPageRoutingModule","imports","forChild","exports","SettingGroupsPageModule","providers","declarations","SettingGroupsPage","splitPane","document","querySelector","windowWidth","window","innerWidth","splitPaneShownAt","when","open","menu","SettingGroupsService","api","toast","alert","auth","search","searchId","searchName","searchCode","searchSettingsName","searchSettingsCode","newSettingGroup","settingGroups","page","searchString","get","subscribe","res","code","settingGroup","id","updateSettingGroup","storeSettingGroup","post","err","put","confirmation","name","created_at","updated_at","settings","providedIn"],"mappings":"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","file":"setting-groups-setting-groups-module-es5.js","sourcesContent":["export default \"<form #settingGroupsForm=\\\"ngForm\\\"\\n      novalidate\\n      autocomplete=\\\"off\\\">\\n    <ion-list>\\n\\n        <ion-item>\\n            <ion-label position=\\\"floating\\\">Nombre</ion-label>\\n            <ion-input type=\\\"text\\\"\\n                       [(ngModel)]=\\\"settingGroupsService.settingGroup.name\\\"\\n                       name=\\\"name\\\"\\n                       id=\\\"name-field\\\"\\n                       required></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.name\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"settingGroupsForm.form.controls['name']?.hasError(validation.type)\\\">\\n                    {{ validation.message }}\\n                </div>\\n            </ng-container>\\n        </div>\\n\\n        <app-settings-list></app-settings-list>\\n\\n    </ion-list>\\n</form>\\n\";","export default \"<ion-searchbar placeholder=\\\"Buscar grupos de parametros\\\"\\n               animated\\n               debounce=\\\"500\\\"\\n               (keyup.enter)=\\\"settingGroupsService.getSettingGroups()\\\"\\n               (ionCancel)=\\\"settingGroupsService.search = ''\\\"\\n               (ionChange)=\\\"settingGroupsService.getSettingGroups()\\\"\\n               [showCancelButton]=\\\"'focus'\\\"\\n               [cancelButtonText]=\\\"'cancelar'\\\"\\n               [(ngModel)]=\\\"settingGroupsService.search\\\"></ion-searchbar>\\n<ion-list>\\n    <ion-list-header>\\n        Grupos de parametros\\n    </ion-list-header>\\n    <ng-container *ngIf=\\\"settingGroupsService?.settingGroups?.length\\\">\\n\\n        <ng-container *ngFor=\\\"let settingGroup of settingGroupsService?.settingGroups\\\">\\n            <ion-item-sliding>\\n                <ion-item (click)=\\\"settingGroupsService.getSettingGroup(settingGroup.code); openModal('Editar')\\\">\\n                    <ion-label>\\n                        {{settingGroup.name}}\\n                        <h3>{{settingGroup.code}}</h3>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item-options side=\\\"end\\\">\\n                    <ion-item-option color=\\\"danger\\\"\\n                                     (click)=\\\"settingGroupsService.deleteSettingGroup(settingGroup)\\\">\\n                        <ion-icon name=\\\"trash\\\"\\n                                  class=\\\"icon-s\\\"></ion-icon>\\n                    </ion-item-option>\\n                </ion-item-options>\\n            </ion-item-sliding>\\n        </ng-container>\\n\\n    </ng-container>\\n\\n    <ng-container *ngIf=\\\"!settingGroupsService?.settingGroups?.length\\\">\\n        <ion-item>\\n            <ion-label>Sin grupos de parametros</ion-label>\\n            <ion-button (click)=\\\"settingGroupsService.settingGroup = {}; openModal()\\\"\\n                        slot=\\\"end\\\"\\n                        fill=\\\"outline\\\"\\n                        color=\\\"success\\\">\\n                Crear grupos de parametros\\n                <ion-icon name=\\\"add-circle-outline\\\" slot=\\\"end\\\"></ion-icon>\\n            </ion-button>\\n        </ion-item>\\n    </ng-container>\\n\\n</ion-list>\\n\\n\\n\";","export default \"<!-- my-modal.page.html -->\\n<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-button (click)=\\\"closeModal()\\\">\\n                <ion-icon slot=\\\"icon-only\\\"\\n                          [name]=\\\"'arrow-back-outline'\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-buttons slot=\\\"primary\\\">\\n            <ion-button color=\\\"success\\\"\\n                        (click)=\\\"settingGroupsService.saveSettingGroup(); closeModal()\\\"\\n                        [disabled]=\\\"!settingGroupsFormComponent?.settingGroupsForm?.valid\\\">\\n                <ion-icon slot=\\\"icon-only\\\"\\n                          [name]=\\\"'save-outline'\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-title>{{action}} Grupo de parametros</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n\\n    <app-setting-groups-form #settingGroupsFormComponent></app-setting-groups-form>\\n\\n</ion-content>\\n\";","export default \"<ion-header translucent=\\\"true\\\">\\n  <ion-toolbar>\\n      <ion-buttons slot=\\\"start\\\">\\n          <ion-menu-toggle auto-hide=\\\"false\\\" menu=\\\"main-menu\\\">\\n              <ion-button (click)=\\\"toggleMenu()\\\">\\n                  <ion-icon slot=\\\"icon-only\\\" name=\\\"menu\\\"></ion-icon>\\n              </ion-button>\\n          </ion-menu-toggle>\\n      </ion-buttons>\\n      <ion-buttons slot=\\\"primary\\\">\\n          <ion-button color=\\\"success\\\"\\n                      (click)=\\\"settingGroupsService.settingGroup = {}; openModal('Crear')\\\">\\n              <ion-icon slot=\\\"icon-only\\\" [name]=\\\"'add-circle-outline'\\\"></ion-icon>\\n          </ion-button>\\n      </ion-buttons>\\n    <ion-title>Grupos de parametros</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n    <app-setting-groups-list></app-setting-groups-list>\\n\\n</ion-content>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmctZ3JvdXBzL3NldHRpbmctZ3JvdXBzLWZvcm0vc2V0dGluZy1ncm91cHMtZm9ybS5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {FormGroup} from \"@angular/forms\";\nimport {SettingGroupsService} from \"../setting-groups.service\";\n\n@Component({\n  selector: 'app-setting-groups-form',\n  templateUrl: './setting-groups-form.component.html',\n  styleUrls: ['./setting-groups-form.component.scss'],\n})\nexport class SettingGroupsFormComponent implements OnInit {\n\n  @ViewChild('settingGroupsForm') settingGroupsForm: FormGroup;\n  public validationMessages = {\n    'name': [\n      {type: 'required', message: 'El campo nombre es obligatorio.'},\n    ],\n  };\n\n\n  constructor(\n      public settingGroupsService: SettingGroupsService\n  ) { }\n\n  ngOnInit() {}\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmctZ3JvdXBzL3NldHRpbmctZ3JvdXBzLWxpc3Qvc2V0dGluZy1ncm91cHMtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {SettingGroupsService} from \"../setting-groups.service\";\nimport {SettingGroupsPage} from \"../setting-groups.page\";\nimport {SettingGroupsModalComponent} from \"../setting-groups-modal/setting-groups-modal.component\";\nimport {ModalController} from \"@ionic/angular\";\n\n\n@Component({\n  selector: 'app-setting-groups-list',\n  templateUrl: './setting-groups-list.component.html',\n  styleUrls: ['./setting-groups-list.component.scss'],\n})\nexport class SettingGroupsListComponent implements OnInit {\n\n  @ViewChild('settingGroupsPage') settingGroupsPage: SettingGroupsPage\n\n  dataReturned: any;\n\n  constructor(\n      public settingGroupsService: SettingGroupsService,\n      public modalController: ModalController,\n  ) { }\n\n  ngOnInit() {\n    this.settingGroupsService.getSettingGroups();\n  }\n\n  async openModal(action = null) {\n    const modal = await this.modalController.create({\n      component: SettingGroupsModalComponent,\n      componentProps: {\n        action: action ?? ''\n      }\n    });\n\n    modal.onDidDismiss().then((dataReturned) => {\n      if (dataReturned !== null) {\n        this.dataReturned = dataReturned.data;\n        console.table(dataReturned);\n      }\n    });\n\n    return await modal.present();\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmctZ3JvdXBzL3NldHRpbmctZ3JvdXBzLW1vZGFsL3NldHRpbmctZ3JvdXBzLW1vZGFsLmNvbXBvbmVudC5zY3NzIn0= */\";","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\nimport {ModalController, NavParams} from \"@ionic/angular\";\nimport {SettingGroupsFormComponent} from \"../setting-groups-form/setting-groups-form.component\";\nimport {SettingGroupsService} from \"../setting-groups.service\";\n\n@Component({\n  selector: 'app-setting-groups-modal',\n  templateUrl: './setting-groups-modal.component.html',\n  styleUrls: ['./setting-groups-modal.component.scss'],\n})\nexport class SettingGroupsModalComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('settingGroupsFormComponent') settingGroupsFormComponent: SettingGroupsFormComponent;\n\n  action: string;\n\n  constructor(\n      private modalController: ModalController,\n      private navParams: NavParams,\n      public settingGroupsService: SettingGroupsService\n  ) { }\n\n  ngOnInit() {\n    console.table(this.navParams);\n    this.action = this.navParams.data.action;\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  async closeModal() {\n    const onClosedData: string = \"Wrapped Up!\";\n    await this.modalController.dismiss(onClosedData);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingGroupsPage } from './setting-groups.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingGroupsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingGroupsPageRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {SettingGroupsPageRoutingModule} from './setting-groups-routing.module';\n\nimport {SettingGroupsPage} from './setting-groups.page';\nimport {SharedModule} from \"../@shared/shared.module\";\nimport {SettingGroupsService} from \"./setting-groups.service\";\nimport {SettingGroupsListComponent} from \"./setting-groups-list/setting-groups-list.component\";\nimport {SettingGroupsFormComponent} from \"./setting-groups-form/setting-groups-form.component\";\nimport {SettingGroupsModalComponent} from \"./setting-groups-modal/setting-groups-modal.component\";\nimport {SettingsListComponent} from \"../settings/settings-list/settings-list.component\";\nimport {SettingsService} from \"../settings/settings.service\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        SharedModule,\n        SettingGroupsPageRoutingModule\n    ],\n    providers: [\n        SettingGroupsService,\n        SettingsService,\n    ],\n    declarations: [\n        SettingGroupsPage,\n        SettingGroupsListComponent,\n        SettingGroupsFormComponent,\n        SettingGroupsModalComponent,\n        SettingsListComponent,\n    ]\n})\nexport class SettingGroupsPageModule {\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmctZ3JvdXBzL3NldHRpbmctZ3JvdXBzLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport {ModalController} from \"@ionic/angular\";\nimport {SettingGroupsModalComponent} from \"./setting-groups-modal/setting-groups-modal.component\";\nimport {SettingGroupsService} from \"./setting-groups.service\";\n// import {SettingGroupsService} from \"./setting-groups.service\";\n\n@Component({\n  selector: 'app-setting-groups',\n  templateUrl: './setting-groups.page.html',\n  styleUrls: ['./setting-groups.page.scss'],\n})\nexport class SettingGroupsPage implements OnInit {\n\n  dataReturned: any;\n\n  constructor(\n      public modalController: ModalController,\n      public settingGroupsService: SettingGroupsService\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n  toggleMenu() {\n    const splitPane = document.querySelector('ion-split-pane');\n    const windowWidth = window.innerWidth;\n    const splitPaneShownAt = 992;\n    const when = `(min-width: ${splitPaneShownAt}px)`;\n    if (windowWidth >= splitPaneShownAt) {\n      // split pane view is visible\n      const open = splitPane.when === when;\n      splitPane.when = open ? false : when;\n    } else {\n      // split pane view is not visible\n      // toggle menu open\n      const menu = splitPane.querySelector('ion-menu');\n      return menu.open();\n    }\n  }\n\n  async openModal(action = null) {\n    const modal = await this.modalController.create({\n      component: SettingGroupsModalComponent,\n      componentProps: {\n        action: action ?? ''\n      }\n    });\n\n    modal.onDidDismiss().then((dataReturned) => {\n      if (dataReturned !== null) {\n        this.dataReturned = dataReturned.data;\n        // console.table(dataReturned);\n      }\n    });\n\n    return await modal.present();\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ApiService} from \"../@shared/services/api.service\";\nimport {ToastService} from \"../@shared/services/toast.service\";\nimport {AlertService} from \"../@shared/services/alert.service\";\nimport {AuthService} from \"../@shared/services/auth.service\";\nimport {StorageLocalService} from \"../@shared/services/storage-local.service\";\nimport {SettingGroup} from \"./setting-group\";\nimport {Setting} from \"../settings/setting\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SettingGroupsService {\n\n    public settingGroups: SettingGroup[];\n    public settingGroup: SettingGroup;\n\n    public search: string = '';\n    public searchId: string = '';\n    public searchName: string = '';\n    public searchCode: string = '';\n    public searchSettingsName: string = '';\n    public searchSettingsCode: string = '';\n\n    constructor(\n        public api: ApiService,\n        public toast: ToastService,\n        public alert: AlertService,\n        public auth: AuthService,\n    ) {\n        //\n        this.newSettingGroup();\n        this.settingGroups = [];\n    }\n\n    /**\n     * Get SettingGroups\n     * @param page\n     */\n    public getSettingGroups(page: any = 1) {\n        const searchString = this.search ? `&q[name:cont]=${this.search}&q[code:cont]=${this.search}&q[settings.name:cont]=${this.search}&q[settings.code:cont]=${this.search}` : '';\n        this.api.get(`setting-groups?page=${page}${searchString}`)\n            .subscribe(\n                (res: any) => {\n                    this.settingGroups = res.data;\n                }\n            );\n    }\n\n    /**\n     * Get SettingGroups\n     * @param code\n     */\n    public getSettingGroup(code: any) {\n        this.api.get(`setting-groups/${code}`)\n            .subscribe(\n                (res: any) => {\n                    this.settingGroup = res.data;\n                }\n            );\n    }\n\n    /**\n     * Save SettingGroups\n     */\n    public saveSettingGroup() {\n        if (this.settingGroup.id) {\n            this.updateSettingGroup();\n        }\n\n        if (!this.settingGroup.id) {\n            this.storeSettingGroup();\n        }\n    }\n\n    /**\n     * Store SettingGroup\n     */\n    private storeSettingGroup() {\n        this.api.post('setting-groups', this.settingGroup)\n            .subscribe(\n                (res: any) => {\n                    this.toast.present(res.message, 'toast-success');\n                    this.getSettingGroups();\n                },\n                (err: any) => {\n\n                }\n            );\n    }\n\n    /**\n     * Update SettingGroup\n     */\n    private updateSettingGroup() {\n        this.api.put(`setting-groups/${this.settingGroup.code}`, this.settingGroup)\n            .subscribe(\n                (res: any) => {\n                    this.toast.present(res.message, 'toast-success');\n                    this.getSettingGroups();\n                },\n                (err: any) => {\n\n                }\n            );\n    }\n\n    /**\n     * Delete SettingGroup\n     * @param settingGroup\n     */\n    public deleteSettingGroup(settingGroup: SettingGroup) {\n        this.alert.confirmation(`Eliminar ${settingGroup.name}?`)\n            .then(res => {\n                if (res) {\n                    this.api.delete(`setting-groups/${settingGroup.code}`, {})\n                        .subscribe(\n                            (res: any) => {\n                                this.toast.present(res.message, 'toast-success');\n                                this.getSettingGroups();\n                            },\n                            (err: any) => {\n\n                            }\n                        );\n                }\n            });\n        return;\n    }\n\n    /**\n     * Create empty SettingGroup\n     */\n    newSettingGroup() {\n        this.settingGroup = {\n            id: null,\n            name: null,\n            code: null,\n            created_at: null,\n            updated_at: null,\n            settings: [],\n        };\n    }\n\n}\n"]}