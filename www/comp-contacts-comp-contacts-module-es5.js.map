{"version":3,"sources":["webpack:///src/app/comp-contacts/comp-contacts-create/comp-contacts-create.component.html","webpack:///src/app/comp-contacts/comp-contacts-duplicate/comp-contacts-duplicate.component.html","webpack:///src/app/comp-contacts/comp-contacts-edit/comp-contacts-edit.component.html","webpack:///src/app/comp-contacts/comp-contacts-form/comp-contacts-form.component.html","webpack:///src/app/comp-contacts/comp-contacts-list/comp-contacts-list.component.html","webpack:///src/app/comp-contacts/comp-contacts.page.html","webpack:///src/app/comp-contacts/comp-contacts-create/comp-contacts-create.component.scss","webpack:///src/app/comp-contacts/comp-contacts-create/comp-contacts-create.component.ts","webpack:///src/app/comp-contacts/comp-contacts-duplicate/comp-contacts-duplicate.component.scss","webpack:///src/app/comp-contacts/comp-contacts-duplicate/comp-contacts-duplicate.component.ts","webpack:///src/app/comp-contacts/comp-contacts-edit/comp-contacts-edit.component.scss","webpack:///src/app/comp-contacts/comp-contacts-edit/comp-contacts-edit.component.ts","webpack:///src/app/comp-contacts/comp-contacts-form/comp-contacts-form.component.scss","webpack:///src/app/comp-contacts/comp-contacts-form/comp-contacts-form.component.ts","webpack:///src/app/comp-contacts/comp-contacts-list/comp-contacts-list.component.scss","webpack:///src/app/comp-contacts/comp-contacts-list/comp-contacts-list.component.ts","webpack:///src/app/comp-contacts/comp-contacts-routing.module.ts","webpack:///src/app/comp-contacts/comp-contacts.module.ts","webpack:///src/app/comp-contacts/comp-contacts.page.scss","webpack:///src/app/comp-contacts/comp-contacts.page.ts","webpack:///src/app/comp-contacts/comp-contacts.service.ts"],"names":["CompContactsCreateComponent","compContactsService","route","platform","splitPanel","id","formValid","clearPosts","show","next","compContactForm","compContactsForm","valueChanges","subscribe","data","compContactsFormValid","valid","console","log","createCompContact","compContact","selector","template","CompContactsDuplicateComponent","CompContactsEditComponent","model","snapshot","paramMap","get","editCompContact","CompContactsFormComponent","toTitlecase","validationMessages","type","message","transform","event","company_id","value","syst_position_id","CompContactsListComponent","api","loading","getCompContacts","content","scrollToTop","routes","path","component","CompContactsPageRoutingModule","imports","forChild","exports","CompContactsPageModule","declarations","CompContactsPage","CompContactsService","alert","toast","router","navigation","compContactsUrl","compContacts","compContactLists","searchValue","perPage","meta","page","pagesContent","document","getElementById","res","lists","err","error","put","pivots","present","back","post","confirmation","confirm","providedIn"],"mappings":"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","file":"comp-contacts-comp-contacts-module-es5.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n\\n        <ion-buttons slot=\\\"start\\\">\\n            <!-- <ion-button [routerLink]=\\\"'/comp-contacts'\\\">\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back-outline\\\"></ion-icon>\\n            </ion-button> -->\\n            <ion-back-button\\n              [text]=\\\"''\\\"\\n              [icon]=\\\"'arrow-back-outline'\\\">\\n            </ion-back-button>\\n        </ion-buttons>\\n\\n        <ion-buttons slot=\\\"primary\\\">\\n            <ion-button (click)=\\\"compContactsService.storeCompContact()\\\"\\n                        color=\\\"success\\\"\\n                        fill=\\\"clear\\\"\\n                        [disabled]=\\\"!compContactsService.compContactsFormValid.value\\\">\\n                        <ng-container *ngIf=\\\"!platform.is('mobile')\\\">Guardar</ng-container>\\n                <ion-icon slot=\\\"end\\\" color=\\\"success\\\" name=\\\"save-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n\\n        <ion-title>Crear {{'EMPRESAS CONTACTOS' | titlecase}}</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content fullscreen>\\n    <ion-card>\\n        <app-comp-contacts-form #compContactForm [model]=\\\"compContactsService.compContact\\\"></app-comp-contacts-form>\\n    </ion-card>\\n\\n</ion-content>\\n\";","export default \"<p>\\n  CompContacts duplicate works!\\n</p>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n\\n        <ion-buttons slot=\\\"start\\\">\\n            <!-- <ion-button [routerLink]=\\\"'/comp-contacts'\\\">\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back-outline\\\"></ion-icon>\\n            </ion-button> -->\\n            <ion-back-button\\n              [text]=\\\"''\\\"\\n              [icon]=\\\"'arrow-back-outline'\\\">\\n            </ion-back-button>\\n        </ion-buttons>\\n\\n        <ion-buttons slot=\\\"primary\\\">\\n            <ion-button (click)=\\\"compContactsService.updateCompContact()\\\"\\n                        color=\\\"success\\\"\\n                        fill=\\\"clear\\\"\\n                        [disabled]=\\\"!compContactsService.compContactsFormValid.value\\\">\\n                        <ng-container *ngIf=\\\"!platform.is('mobile')\\\">Guardar</ng-container>\\n                <ion-icon slot=\\\"end\\\" color=\\\"success\\\" name=\\\"save-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n\\n        <ion-title>Editar {{'EMPRESAS CONTACTOS' | titlecase}}: {{ compContactsService.compContact?.name }}</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content fullscreen>\\n    <ion-card>\\n            <app-comp-contacts-form #compContactForm [model]=\\\"compContactsService.compContact\\\"></app-comp-contacts-form>\\n    </ion-card>\\n\\n</ion-content>\\n\";","export default \"<form #compContactsForm=\\\"ngForm\\\" novalidate autocomplete=\\\"off\\\">\\n\\n\\n    <!-- company_id -->\\n    <ion-item class=\\\"item-transparent\\\">\\n        <ion-label>{{ 'EMPRESA' | titlecase }}</ion-label>\\n        <ionic-selectable name=\\\"company_id\\\"\\n                          id=\\\"company_id-field\\\"\\n                          [required]=\\\"true\\\"\\n                          [(ngModel)]=\\\"model.company\\\"\\n                          [items]=\\\"compContactsService.compContactLists.Company\\\"\\n                          itemValueField=\\\"id\\\"\\n                          itemTextField=\\\"name\\\"\\n                          [canClear]=\\\"true\\\"\\n                          [hasConfirmButton]=\\\"true\\\"\\n                          [confirmButtonText]=\\\"'Seleccionar'\\\"\\n                          [searchPlaceholder]=\\\"'Buscar ' + ('EMPRESAS' | titlecase)\\\"\\n                          [searchFailText]=\\\"'No se encontro ' + ('EMPRESAS' | titlecase) + ' que coincida!'\\\"\\n                          [closeButtonText]=\\\"'Cancelar'\\\"\\n                          [clearButtonText]=\\\"'Limpiar'\\\"\\n                          [canSearch]=\\\"true\\\"\\n                          (onChange)=\\\"setCompanyId($event)\\\">\\n        </ionic-selectable>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validationMessages.company_id\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"compContactsForm.form.controls['company_id']?.hasError(validation.type)\\\">\\n                {{ validation.message }}\\n            </div>\\n        </ng-container>\\n    </div>\\n    <!-- end company_id -->\\n\\n\\n    <!-- syst_position_id -->\\n    <ion-item class=\\\"item-transparent\\\">\\n        <ion-label>{{ 'CARGO' | titlecase }}</ion-label>\\n        <ionic-selectable name=\\\"syst_position_id\\\"\\n                          id=\\\"syst_position_id-field\\\"\\n                          [required]=\\\"true\\\"\\n                          [(ngModel)]=\\\"model.syst_position\\\"\\n                          [items]=\\\"compContactsService.compContactLists.SystPosition\\\"\\n                          itemValueField=\\\"id\\\"\\n                          itemTextField=\\\"name\\\"\\n                          [canClear]=\\\"true\\\"\\n                          [hasConfirmButton]=\\\"true\\\"\\n                          [confirmButtonText]=\\\"'Seleccionar'\\\"\\n                          [searchPlaceholder]=\\\"'Buscar ' + ('CARGOS' | titlecase)\\\"\\n                          [searchFailText]=\\\"'No se encontro ' + ('CARGOS' | titlecase) + ' que coincida!'\\\"\\n                          [closeButtonText]=\\\"'Cancelar'\\\"\\n                          [clearButtonText]=\\\"'Limpiar'\\\"\\n                          [canSearch]=\\\"true\\\"\\n                          (onChange)=\\\"setSystPositionId($event)\\\">\\n        </ionic-selectable>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validationMessages.syst_position_id\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"compContactsForm.form.controls['syst_position_id']?.hasError(validation.type)\\\">\\n                {{ validation.message }}\\n            </div>\\n        </ng-container>\\n    </div>\\n    <!-- end syst_position_id -->\\n\\n\\n            <!-- name -->\\n            <ion-item class=\\\"item-transparent\\\">\\n                <ion-label>{{ 'NOMBRE' | titlecase }}</ion-label>\\n                <ion-input [(ngModel)]=\\\"model.name\\\"\\n                            type=\\\"text\\\"\\n                            name=\\\"name\\\"\\n                            id=\\\"name-field\\\"\\n                            [required]=\\\"true\\\"\\n                            placeholder=\\\"\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n                <ng-container *ngFor=\\\"let validation of validationMessages.name\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"compContactsForm.form.controls['name']?.hasError(validation.type)\\\">\\n                        {{ validation.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- end name -->\\n\\n\\n            <!-- phone -->\\n            <ion-item class=\\\"item-transparent\\\">\\n                <ion-label>{{ 'TELÉFONO' | titlecase }}</ion-label>\\n                <ion-input [(ngModel)]=\\\"model.phone\\\"\\n                            type=\\\"text\\\"\\n                            name=\\\"phone\\\"\\n                            id=\\\"phone-field\\\"\\n                            [required]=\\\"true\\\"\\n                            placeholder=\\\"\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n                <ng-container *ngFor=\\\"let validation of validationMessages.phone\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"compContactsForm.form.controls['phone']?.hasError(validation.type)\\\">\\n                        {{ validation.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- end phone -->\\n\\n\\n            <!-- email -->\\n            <ion-item class=\\\"item-transparent\\\">\\n                <ion-label>{{ 'CORREO' | titlecase }}</ion-label>\\n                <ion-input [(ngModel)]=\\\"model.email\\\"\\n                            type=\\\"text\\\"\\n                            name=\\\"email\\\"\\n                            id=\\\"email-field\\\"\\n                            placeholder=\\\"\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n                <ng-container *ngFor=\\\"let validation of validationMessages.email\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"compContactsForm.form.controls['email']?.hasError(validation.type)\\\">\\n                        {{ validation.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- end email -->\\n\\n\\n            <!-- main -->\\n            <ion-item class=\\\"item-transparent\\\">\\n                <ion-label>{{ 'PRINCIPAL' | titlecase }}</ion-label>\\n                <ion-toggle name=\\\"main\\\"\\n                            id=\\\"main-field\\\"\\n                            slot=\\\"end\\\"\\n                            [(ngModel)]=\\\"model.main\\\"></ion-toggle>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n                <ng-container *ngFor=\\\"let validation of validationMessages.main\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"compContactsForm.form.controls['main']?.hasError(validation.type)\\\">\\n                        {{ validation.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- end main -->\\n\\n\\n</form>\\n\";","export default \"<app-main-header title=\\\"{{'EMPRESAS CONTACTOS' | titlecase}}\\\"\\n                 primaryLink=\\\"comp-contacts/create\\\"\\n                 primaryText=\\\"Crear {{'EMPRESAS CONTACTOS' | lowercase}}\\\"\\n                 primaryIcon=\\\"add-circle-outline\\\"></app-main-header>\\n\\n<ion-content id=\\\"pages-content\\\">\\n\\n    <ion-searchbar showCancelButton=\\\"focus\\\"\\n                       [cancelButtonText]=\\\"'Cancelar'\\\"\\n                       [placeholder]=\\\"'Buscar ' + ('EMPRESAS CONTACTOS' | lowercase )\\\"\\n                       (ionCancel)=\\\"this.compContactsService.searchValue = ''; compContactsService.getCompContacts()\\\"\\n                       (keyup.enter)=\\\"compContactsService.getCompContacts()\\\"\\n                       [(ngModel)]=\\\"compContactsService.searchValue\\\"></ion-searchbar>\\n\\n    <ng-container *ngIf=\\\"!(loading.loading | async) && compContactsService.compContacts?.length\\\">\\n        <ion-card *ngFor=\\\"let compContact of compContactsService.compContacts; let index = index\\\">\\n            <ion-list>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'NOMBRE' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\">{{ compContact?.name }}</div>\\n                    </ion-item>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'TELÉFONO' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\">{{ compContact?.phone }}</div>\\n                    </ion-item>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'CORREO' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\">{{ compContact?.email }}</div>\\n                    </ion-item>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'PRINCIPAL' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\">{{ compContact?.main  ? 'Si' : 'No' }}</div>\\n                    </ion-item>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'EMPRESAS' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\"><a routerLink=\\\"/companies/{{ compContact?.company?.id }}/edit\\\">{{ compContact?.company?.name }}</a></div>\\n                    </ion-item>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'CARGOS' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\"><a routerLink=\\\"/syst-positions/{{ compContact?.syst_position?.id }}/edit\\\">{{ compContact?.syst_position?.name }}</a></div>\\n                    </ion-item>\\n            </ion-list>\\n            <ion-footer>\\n                <ion-row>\\n                    <ion-col class=\\\"ion-text-center\\\">\\n                        <ion-button color=\\\"success\\\" size=\\\"small\\\" fill=\\\"clear\\\" [routerLink]=\\\"'/comp-contacts/' + compContact?.id + '/edit'\\\">\\n                            <ion-icon name=\\\"create-outline\\\"></ion-icon>\\n                            <div>Editar</div>\\n                        </ion-button>\\n                    </ion-col>\\n                    <ion-col class=\\\"ion-text-center\\\">\\n                        <ion-button color=\\\"danger\\\" size=\\\"small\\\" fill=\\\"clear\\\" (click)=\\\"compContactsService.deleteCompContact(compContact?.id)\\\">\\n                            <ion-icon name=\\\"trash-outline\\\"></ion-icon>\\n                            <div>Eliminar</div>\\n                        </ion-button>\\n                    </ion-col>\\n                </ion-row>\\n            </ion-footer>\\n        </ion-card>\\n    </ng-container>\\n\\n    <ng-container *ngIf=\\\"!(loading.loading | async) && !compContactsService.compContacts?.length\\\">\\n        <ion-item>\\n            <ion-icon class=\\\"text-warning\\\" name=\\\"warning-outline\\\" slot=\\\"start\\\"></ion-icon>\\n            <ion-label><h2>No se encontraron {{'EMPRESAS CONTACTOS' | titlecase}}</h2></ion-label>\\n            <ion-button [routerLink]=\\\"'/comp-contacts/create'\\\" fill=\\\"outline\\\" color=\\\"success\\\" slot=\\\"end\\\">\\n                Crear {{'EMPRESAS CONTACTOS' | titlecase}}\\n                <ion-icon name=\\\"add-circle-outline\\\" slot=\\\"end\\\"></ion-icon>\\n            </ion-button>\\n        </ion-item>\\n    </ng-container>\\n\\n</ion-content>\\n\\n<ion-footer class=\\\"lists-footer\\\">\\n    <ion-row *ngIf=\\\"compContactsService.meta\\\">\\n        <ion-col class=\\\"ion-text-center\\\" size=\\\"12\\\">\\n            <ion-button (click)=\\\"compContactsService.getCompContacts(compContactsService.meta.current_page - 1)\\\"\\n                        [disabled]=\\\"compContactsService.meta.current_page == 1\\\"\\n                        fill=\\\"clear\\\">\\n                <ion-icon slot=\\\"end\\\" name=\\\"play-outline\\\" style=\\\"transform: rotate(180deg);\\\"></ion-icon>\\n            </ion-button>\\n            <ion-button fill=\\\"clear\\\" [disabled]=\\\"true\\\"> Pag: {{compContactsService.meta.current_page}}\\n                /{{compContactsService.meta.last_page}} {{compContactsService.meta.from}}-{{compContactsService.meta.to}}\\n                /{{compContactsService.meta.total}} </ion-button>\\n            <ion-button (click)=\\\"compContactsService.getCompContacts(compContactsService.meta.current_page + 1)\\\"\\n                        [disabled]=\\\"compContactsService.meta.current_page == compContactsService.meta.last_page\\\"\\n                        fill=\\\"clear\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"play-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-col>\\n    </ion-row>\\n</ion-footer>\\n\";","export default \"<app-main-header title=\\\"EMPRESAS CONTACTOS\\\"></app-main-header>\\n\\n<ion-content>\\n\\n        <ion-row>\\n\\n            <ion-col size-md=\\\"3\\\" size-sm=\\\"6\\\" size-xs=\\\"12\\\">\\n                <ion-card routerLink=\\\"/comp-contacts/list\\\">\\n                    <div style=\\\"height: 120px; width: 100%; display: flex; align-items: center; justify-content: center;\\\">\\n                        <ion-icon name=\\\"list-circle-outline\\\" color=\\\"primary\\\" class=\\\"icon-m\\\"></ion-icon>\\n                    </div>\\n                    <ion-card-header>\\n                        <ion-card-subtitle class=\\\"ion-text-center\\\">\\n                            Listar {{ 'EMPRESAS CONTACTOS'  | titlecase }}\\n                        </ion-card-subtitle>\\n                    </ion-card-header>\\n\\n                </ion-card>\\n            </ion-col>\\n\\n            <ion-col size-md=\\\"3\\\" size-sm=\\\"6\\\" size-xs=\\\"12\\\">\\n                <ion-card routerLink=\\\"/comp-contacts/create\\\">\\n                    <div style=\\\"height: 120px; width: 100%; display: flex; align-items: center; justify-content: center;\\\">\\n                        <ion-icon name=\\\"add-circle-outline\\\" color=\\\"success\\\" class=\\\"icon-m\\\"></ion-icon>\\n                    </div>\\n                    <ion-card-header>\\n                        <ion-card-subtitle class=\\\"ion-text-center\\\">\\n                            Crear {{ 'EMPRESAS CONTACTOS' | titlecase }}\\n                        </ion-card-subtitle>\\n                    </ion-card-header>\\n\\n                </ion-card>\\n            </ion-col>\\n\\n        </ion-row>\\n\\n</ion-content>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXAtY29udGFjdHMvY29tcC1jb250YWN0cy1jcmVhdGUvY29tcC1jb250YWN0cy1jcmVhdGUuY29tcG9uZW50LnNjc3MifQ== */\";","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\nimport {CompContactsService} from \"../comp-contacts.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CompContact} from \"../comp-contact\";\nimport {CompContactsFormComponent} from \"../comp-contacts-form/comp-contacts-form.component\";\nimport { Platform } from '@ionic/angular';\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\n\n@Component({\n    selector: 'app-comp-contacts-create',\n    templateUrl: './comp-contacts-create.component.html',\n    styleUrls: ['./comp-contacts-create.component.scss']\n})\nexport class CompContactsCreateComponent implements OnInit, AfterViewInit {\n\n    @ViewChild('compContactForm') compContactForm: CompContactsFormComponent;\n\n    id: any = null;\n    public formValid = false;\n\n    constructor(\n        public compContactsService: CompContactsService,\n        public route: ActivatedRoute,\n        public platform: Platform,\n        public splitPanel: SplitPanelService\n    ) {\n\n    }\n\n    ngOnInit(): void {\n        this.clearPosts();\n    }\n\n    ionViewWillEnter() {\n       this.splitPanel.show.next(true);\n    }\n\n    ngAfterViewInit() {\n        this.compContactForm.compContactsForm.valueChanges.subscribe((data) => {\n            this.compContactsService.compContactsFormValid.next(this.compContactForm.compContactsForm.valid);\n        });\n    }\n\n    clearPosts() {\n        console.log('clear');\n        this.compContactsService.createCompContact();\n        this.compContactsService.compContact = <CompContact>{};\n    }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXAtY29udGFjdHMvY29tcC1jb250YWN0cy1kdXBsaWNhdGUvY29tcC1jb250YWN0cy1kdXBsaWNhdGUuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-comp-contacts-duplicate',\n  templateUrl: './comp-contacts-duplicate.component.html',\n  styleUrls: ['./comp-contacts-duplicate.component.scss'],\n})\nexport class CompContactsDuplicateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXAtY29udGFjdHMvY29tcC1jb250YWN0cy1lZGl0L2NvbXAtY29udGFjdHMtZWRpdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild, AfterViewInit} from '@angular/core';\nimport {CompContactsService} from \"../comp-contacts.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CompContact} from \"../comp-contact\";\nimport {CompContactsFormComponent} from \"../comp-contacts-form/comp-contacts-form.component\";\nimport { Platform } from '@ionic/angular';\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\n\n@Component({\n  selector: 'app-comp-contacts-edit',\n  templateUrl: './comp-contacts-edit.component.html',\n  styleUrls: ['./comp-contacts-edit.component.scss']\n})\nexport class CompContactsEditComponent implements OnInit, AfterViewInit {\n\n    @ViewChild('compContactForm') compContactForm: CompContactsFormComponent;\n\n    public id: any = null;\n    public model: CompContact = null;\n\n  constructor(\n      public compContactsService: CompContactsService,\n      public route: ActivatedRoute,\n      public platform: Platform,\n      public splitPanel: SplitPanelService,\n  ) { }\n\n  ngOnInit(): void {\n      this.id = this.route.snapshot.paramMap.get('id');\n      this.compContactsService.editCompContact(this.id);\n  }\n\n  ionViewWillEnter() {\n    this.splitPanel.show.next(true);\n  }\n\n  ngAfterViewInit() {\n      this.compContactForm.compContactsForm.valueChanges.subscribe((data) => {\n          this.compContactsService.compContactsFormValid.next(this.compContactForm.compContactsForm.valid);\n      });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXAtY29udGFjdHMvY29tcC1jb250YWN0cy1mb3JtL2NvbXAtY29udGFjdHMtZm9ybS5jb21wb25lbnQuc2NzcyJ9 */\";","import {AfterViewInit, Component, Input, OnInit, ViewChild} from '@angular/core';\nimport {CompContact} from \"../comp-contact\";\nimport {FormGroup} from \"@angular/forms\";\nimport {CompContactsService} from \"../comp-contacts.service\";\nimport {TitleCasePipe} from \"@angular/common\";\n\n@Component({\n    selector: 'app-comp-contacts-form',\n    templateUrl: './comp-contacts-form.component.html',\n    styleUrls: ['./comp-contacts-form.component.scss']\n})\nexport class CompContactsFormComponent implements OnInit, AfterViewInit {\n\n    @Input('model') model: CompContact = <CompContact>{};\n\n    @ViewChild('compContactsForm') compContactsForm: FormGroup;\n\n    public validationMessages = {\n        'company_id': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('EMPRESA') + ' es obligatorio.'},\n        ],\n        'syst_position_id': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('CARGO') + ' es obligatorio.'},\n        ],\n        'name': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('NOMBRE') + ' es obligatorio.'},\n        ],\n        'phone': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('TELÉFONO') + ' es obligatorio.'},\n        ],\n        'email': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('CORREO') + ' es obligatorio.'},\n        ],\n        'main': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('PRINCIPAL') + ' es obligatorio.'},\n        ],\n    };\n\n    constructor(\n        public compContactsService: CompContactsService,\n        private toTitlecase: TitleCasePipe\n    ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n    }\n\n\n    // set setCompanyId\n\n    setCompanyId(event: any) {\n        this.compContactsService.compContact.company_id = event.value ? event.value.id : null;\n    }\n    // end setCompanyId\n\n\n    // set setSystPositionId\n\n    setSystPositionId(event: any) {\n        this.compContactsService.compContact.syst_position_id = event.value ? event.value.id : null;\n    }\n    // end setSystPositionId\n\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXAtY29udGFjdHMvY29tcC1jb250YWN0cy1saXN0L2NvbXAtY29udGFjdHMtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild} from '@angular/core';\nimport { CompContactsService} from \"../comp-contacts.service\";\nimport {ApiService} from \"../../@shared/services/api.service\";\nimport {LoadingService} from \"../../@shared/services/loading.service\";\nimport {IonContent} from '@ionic/angular';\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\n\n@Component({\n    selector: 'app-comp-contacts-list',\n    templateUrl: './comp-contacts-list.component.html',\n    styleUrls: ['./comp-contacts-list.component.scss'],\n})\nexport class CompContactsListComponent implements OnInit {\n\n    @ViewChild(IonContent, {static: false}) content: IonContent;\n\n    popover: any;\n\n    constructor(\n        public compContactsService: CompContactsService,\n        public api: ApiService,\n        public loading: LoadingService,\n        public splitPanel: SplitPanelService,\n    ) {\n    }\n\n    ngOnInit() {\n        this.compContactsService.getCompContacts();\n    }\n\n    ionViewWillEnter() {\n     this.splitPanel.show.next(true);\n    }\n\n    public scrollToTop() {\n        this.content.scrollToTop(300);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CompContactsPage } from './comp-contacts.page';\nimport {CompContactsEditComponent} from \"./comp-contacts-edit/comp-contacts-edit.component\";\nimport {CompContactsCreateComponent} from \"./comp-contacts-create/comp-contacts-create.component\";\nimport {CompContactsListComponent} from \"./comp-contacts-list/comp-contacts-list.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CompContactsPage\n    },\n    {\n        path: 'list',\n        component: CompContactsListComponent\n    },\n    {\n      path: 'create',\n      component: CompContactsCreateComponent\n    },\n    {\n        path: ':id/edit',\n        component: CompContactsEditComponent\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [\n    RouterModule\n  ],\n})\nexport class CompContactsPageRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {SharedModule} from '../@shared/shared.module';\n\nimport {CompContactsPageRoutingModule} from './comp-contacts-routing.module';\n\nimport { CompContactsPage} from './comp-contacts.page';\nimport { CompContactsListComponent} from \"./comp-contacts-list/comp-contacts-list.component\";\nimport { CompContactsCreateComponent} from \"./comp-contacts-create/comp-contacts-create.component\";\nimport { CompContactsDuplicateComponent} from \"./comp-contacts-duplicate/comp-contacts-duplicate.component\";\nimport { CompContactsEditComponent} from \"./comp-contacts-edit/comp-contacts-edit.component\";\nimport { CompContactsFormComponent} from \"./comp-contacts-form/comp-contacts-form.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        SharedModule,\n        CompContactsPageRoutingModule\n    ],\n    declarations: [\n        CompContactsPage,\n        CompContactsListComponent,\n        CompContactsCreateComponent,\n        CompContactsDuplicateComponent,\n        CompContactsEditComponent,\n        CompContactsFormComponent,\n    ]\n})\nexport class CompContactsPageModule {\n}\n\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXAtY29udGFjdHMvY29tcC1jb250YWN0cy5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport {SplitPanelService} from \"../@shared/services/split-panel.service\";\n\n@Component({\n  selector: 'app-comp-contacts',\n  templateUrl: './comp-contacts.page.html',\n  styleUrls: ['./comp-contacts.page.scss'],\n})\nexport class CompContactsPage implements OnInit {\n\n  constructor(\n    public splitPanel: SplitPanelService\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n  ionViewWillEnter() {\n    this.splitPanel.show.next(true);\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {ApiService} from \"../@shared/services/api.service\";\nimport { CompContact, CompContactLists } from \"./comp-contact\";\nimport {Meta} from \"../@shared/interfaces/meta\";\nimport {AlertService} from \"../@shared/services/alert.service\";\nimport {ToastService} from \"../@shared/services/toast.service\";\nimport {NavigationService} from '../@shared/services/navigation.service'\nimport {BehaviorSubject} from \"rxjs\";\n\ndeclare var $: any;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CompContactsService {\n\n    public compContactsUrl = 'comp-contacts';\n    public compContactsFormValid = new BehaviorSubject<boolean>(false);\n\n    public compContacts: CompContact[] = [];\n    public compContact: CompContact = <CompContact>{};\n    public compContactLists: CompContactLists = {};\n\n    public searchValue = '';\n    public perPage = 10;\n\n    public meta: Meta = null;\n\n    public page = 1;\n\n    public pagesContent = document.getElementById('pages-content');\n\n    constructor(\n        public api: ApiService,\n        public alert: AlertService,\n        public toast: ToastService,\n        public router: Router,\n        private navigation: NavigationService,\n    ) {\n    }\n\n    public getCompContacts(page: any = this.page, perPage: any = this.perPage) {\n\n        this.api.get(this.compContactsUrl + '?page=' + page + '&perPage=' + perPage + '&q[name:cont]=' + this.searchValue)\n            .subscribe(\n                (res: any) => {\n                    // @ts-ignore\n                    document.getElementById('pages-content').scrollToTop(300);\n                    this.compContacts = res.data;\n                    this.compContactLists = res.lists;\n                    this.meta = res.meta;\n                },\n                (err: any) => {\n                    console.error(err);\n                }\n            );\n    }\n\n    public editCompContact(id: any) {\n        this.api.get(this.compContactsUrl + '/' + id + '/edit')\n            .subscribe(\n                (res: any) => {\n                    this.compContact = res.data.model;\n                    this.compContactLists = res.lists;\n                },\n                (err: any) => {\n                    console.error(err);\n                }\n            );\n    }\n\n    public updateCompContact() {\n        this.api.put(this.compContactsUrl + '/' + this.compContact.id, {\n            model: this.compContact,\n            pivots: {\n            }\n        }).subscribe(\n            (res: any) => {\n                this.toast.present(res.message, 'toast-success', 'top');\n                this.navigation.back();\n                this.getCompContacts(1);\n            }\n        );\n    }\n\n    public createCompContact() {\n        this.api.get(this.compContactsUrl + '/create')\n            .subscribe(\n                (res: any) => {\n                    this.compContact = <CompContact>{};\n                    this.compContactLists = res.lists\n                }\n            );\n    }\n\n    public storeCompContact() {\n        this.api.post(this.compContactsUrl, {\n            model: this.compContact,\n            pivots: {\n            }\n        }).subscribe(\n            (res: any) => {\n                this.toast.present(res.message, 'toast-success', 'top');\n                this.navigation.back();\n                this.getCompContacts(1);\n            }\n        );\n    }\n\n    public async deleteCompContact(id: any) {\n        const confirm = await this.alert.confirmation(\n            'Desea eliminar el item?'\n        );\n        if (confirm) {\n            this.api.delete(this.compContactsUrl + '/' + id, {})\n                .subscribe(\n                    (res: any) => {\n                        this.toast.present(res.message, 'toast-success', 'top');\n                        this.getCompContacts(1);\n                    }\n                );\n        } else {\n            return;\n        }\n    }\n\n}\n"]}