{"version":3,"sources":["webpack:///src/app/comments/comments-create/comments-create.component.html","webpack:///src/app/comments/comments-duplicate/comments-duplicate.component.html","webpack:///src/app/comments/comments-edit/comments-edit.component.html","webpack:///src/app/comments/comments-form/comments-form.component.html","webpack:///src/app/comments/comments-list/comments-list.component.html","webpack:///src/app/comments/comments.page.html","webpack:///src/app/comments/comments-create/comments-create.component.scss","webpack:///src/app/comments/comments-create/comments-create.component.ts","webpack:///src/app/comments/comments-duplicate/comments-duplicate.component.scss","webpack:///src/app/comments/comments-duplicate/comments-duplicate.component.ts","webpack:///src/app/comments/comments-edit/comments-edit.component.scss","webpack:///src/app/comments/comments-edit/comments-edit.component.ts","webpack:///src/app/comments/comments-form/comments-form.component.scss","webpack:///src/app/comments/comments-form/comments-form.component.ts","webpack:///src/app/comments/comments-list/comments-list.component.scss","webpack:///src/app/comments/comments-list/comments-list.component.ts","webpack:///src/app/comments/comments-routing.module.ts","webpack:///src/app/comments/comments.module.ts","webpack:///src/app/comments/comments.page.scss","webpack:///src/app/comments/comments.page.ts","webpack:///src/app/comments/comments.service.ts"],"names":["CommentsCreateComponent","commentsService","route","id","formValid","clearPosts","commentForm","commentsForm","valueChanges","subscribe","data","commentsFormValid","next","valid","console","log","createComment","comment","selector","template","CommentsDuplicateComponent","CommentsEditComponent","model","snapshot","paramMap","get","editComment","CommentsFormComponent","toTitlecase","validationMessages","type","message","transform","event","post_id","value","CommentsListComponent","api","loading","getComments","content","scrollToTop","routes","path","component","CommentsPageRoutingModule","imports","forChild","exports","CommentsPageModule","declarations","CommentsPage","CommentsService","alert","toast","router","navigation","commentsUrl","comments","commentLists","searchValue","perPage","meta","page","pagesContent","document","getElementById","res","lists","err","error","put","pivots","present","back","post","confirmation","confirm","providedIn"],"mappings":"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","file":"comments-comments-module-es5.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n\\n        <ion-buttons slot=\\\"start\\\">\\n            <!-- <ion-button [routerLink]=\\\"'/comments'\\\">\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back-outline\\\"></ion-icon>\\n            </ion-button> -->\\n            <ion-back-button\\n              [text]=\\\"''\\\"\\n              [icon]=\\\"'arrow-back-outline'\\\">\\n            </ion-back-button>\\n        </ion-buttons>\\n\\n        <ion-buttons slot=\\\"primary\\\">\\n            <ion-button (click)=\\\"commentsService.storeComment()\\\"\\n                        color=\\\"success\\\"\\n                        fill=\\\"outline\\\"\\n                        [disabled]=\\\"!commentsService.commentsFormValid.value\\\"> Guardar\\n                <ion-icon slot=\\\"icon-only\\\" color=\\\"success\\\" name=\\\"save-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n\\n        <ion-title>Crear {{'COMENTARIOS' | titlecase}}</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content fullscreen>\\n    <ion-card>\\n        <app-comments-form #commentForm [model]=\\\"commentsService.comment\\\"></app-comments-form>\\n    </ion-card>\\n\\n</ion-content>\\n\";","export default \"<p>\\n  Comments duplicate works!\\n</p>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n\\n        <ion-buttons slot=\\\"start\\\">\\n            <!-- <ion-button [routerLink]=\\\"'/comments'\\\">\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back-outline\\\"></ion-icon>\\n            </ion-button> -->\\n            <ion-back-button\\n              [text]=\\\"''\\\"\\n              [icon]=\\\"'arrow-back-outline'\\\">\\n            </ion-back-button>\\n        </ion-buttons>\\n\\n        <ion-buttons slot=\\\"primary\\\">\\n            <ion-button (click)=\\\"commentsService.updateComment()\\\"\\n                        color=\\\"success\\\"\\n                        fill=\\\"outline\\\"\\n                        [disabled]=\\\"!commentsService.commentsFormValid.value\\\"> Guardar\\n                <ion-icon slot=\\\"icon-only\\\" color=\\\"success\\\" name=\\\"save-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n\\n        <ion-title>Editar {{'COMENTARIOS' | titlecase}}: {{ commentsService.comment?.name }}</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content fullscreen>\\n    <ion-card>\\n            <app-comments-form #commentForm [model]=\\\"commentsService.comment\\\"></app-comments-form>\\n    </ion-card>\\n\\n</ion-content>\\n\";","export default \"<form #commentsForm=\\\"ngForm\\\" novalidate autocomplete=\\\"off\\\">\\n\\n\\n    <!-- post_id -->\\n    <ion-item class=\\\"item-transparent\\\">\\n        <ion-label>{{ 'ENTRADA' | titlecase }}</ion-label>\\n        <ionic-selectable name=\\\"post_id\\\"\\n                          id=\\\"post_id-field\\\"\\n                          [required]=\\\"true\\\"\\n                          [(ngModel)]=\\\"model.post\\\"\\n                          [items]=\\\"commentsService.commentLists.Post\\\"\\n                          itemValueField=\\\"id\\\"\\n                          itemTextField=\\\"name\\\"\\n                          [canClear]=\\\"true\\\"\\n                          [hasConfirmButton]=\\\"true\\\"\\n                          [confirmButtonText]=\\\"'Seleccionar'\\\"\\n                          [searchPlaceholder]=\\\"'Buscar ' + ('ENTRADAS' | titlecase)\\\"\\n                          [searchFailText]=\\\"'No se encontro ' + ('ENTRADAS' | titlecase) + ' que coincida!'\\\"\\n                          [closeButtonText]=\\\"'Cancelar'\\\"\\n                          [clearButtonText]=\\\"'Limpiar'\\\"\\n                          [canSearch]=\\\"true\\\"\\n                          (onChange)=\\\"setPostId($event)\\\">\\n        </ionic-selectable>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validationMessages.post_id\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"commentsForm.form.controls['post_id']?.hasError(validation.type)\\\">\\n                {{ validation.message }}\\n            </div>\\n        </ng-container>\\n    </div>\\n    <!-- end post_id -->\\n\\n\\n            <!-- name -->\\n            <ion-item class=\\\"item-transparent\\\">\\n                <ion-label>{{ 'NOMBRE' | titlecase }}</ion-label>\\n                <ion-input [(ngModel)]=\\\"model.name\\\"\\n                            type=\\\"text\\\"\\n                            name=\\\"name\\\"\\n                            id=\\\"name-field\\\"\\n                            [required]=\\\"true\\\"\\n                            placeholder=\\\"\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n                <ng-container *ngFor=\\\"let validation of validationMessages.name\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"commentsForm.form.controls['name']?.hasError(validation.type)\\\">\\n                        {{ validation.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- end name -->\\n\\n\\n            <!-- body -->\\n            <ion-item class=\\\"item-transparent\\\">\\n                <ion-label>{{ 'CUERPO' | titlecase }}</ion-label>\\n                <ion-textarea [(ngModel)]=\\\"model.body\\\"\\n                              name=\\\"body\\\"\\n                              id=\\\"body-field\\\"\\n                              [required]=\\\"true\\\"\\n                              rows=\\\"6\\\"\\n                              placeholder=\\\"\\\"></ion-textarea>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n                <ng-container *ngFor=\\\"let validation of validationMessages.body\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"commentsForm.form.controls['body']?.hasError(validation.type)\\\">\\n                        {{ validation.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- end body -->\\n\\n\\n</form>\\n\\n<pre>\\n{{ model | json }}\\n</pre>\\n\";","export default \"<app-main-header title=\\\"{{'COMENTARIOS' | titlecase}}\\\"\\n                 primaryLink=\\\"comments/create\\\"\\n                 primaryText=\\\"Crear {{'COMENTARIOS' | lowercase}}\\\"\\n                 primaryIcon=\\\"add-circle-outline\\\"></app-main-header>\\n\\n<ion-content id=\\\"pages-content\\\">\\n\\n    <ion-searchbar showCancelButton=\\\"focus\\\"\\n                       [cancelButtonText]=\\\"'Cancelar'\\\"\\n                       [placeholder]=\\\"'Buscar ' + ('COMENTARIOS' | lowercase )\\\"\\n                       (ionCancel)=\\\"this.commentsService.searchValue = ''; commentsService.getComments()\\\"\\n                       (keyup.enter)=\\\"commentsService.getComments()\\\"\\n                       [(ngModel)]=\\\"commentsService.searchValue\\\"></ion-searchbar>\\n\\n    <ion-card>\\n\\n        <ng-container *ngIf=\\\"!(loading.loading | async) && commentsService.comments.length\\\">\\n            <ion-item *ngFor=\\\"let comment of commentsService.comments; let index = index\\\">\\n                <ion-label>\\n                    <h3>{{ 'NOMBRE' | titlecase }}: {{ comment.name }}</h3>\\n                    <h3>{{ 'CUERPO' | titlecase }}: {{ comment.body }}</h3>\\n                    <h3>{{ 'ENTRADAS' | titlecase }}: <a routerLink=\\\"/posts/{{ comment.post.id }}/edit\\\">{{ comment.post.name }}</a></h3>\\n                </ion-label>\\n\\n\\n                <ion-button item-right fill=\\\"clear\\\" color=\\\"success\\\" [routerLink]=\\\"'/comments/' + comment.id + '/edit'\\\">\\n                    <ion-icon name=\\\"create-outline\\\"></ion-icon>\\n                </ion-button>\\n                <!--<ion-button item-right fill=\\\"clear\\\" color=\\\"success\\\" (click)=\\\"null\\\">\\n                    <ion-icon name=\\\"eye-outline\\\"></ion-icon>\\n                </ion-button>-->\\n                <ion-button item-right fill=\\\"clear\\\" color=\\\"danger\\\" (click)=\\\"commentsService.deleteComment(comment.id)\\\">\\n                    <ion-icon name=\\\"trash-outline\\\"></ion-icon>\\n                </ion-button>\\n            </ion-item>\\n        </ng-container>\\n\\n        <ng-container *ngIf=\\\"!(loading.loading | async) && !commentsService.comments.length\\\">\\n            <ion-item>\\n                <ion-icon class=\\\"text-warning\\\" name=\\\"warning-outline\\\" slot=\\\"start\\\"></ion-icon>\\n                <ion-label><h2>No se encontraron {{'COMENTARIOS' | titlecase}}</h2></ion-label>\\n                <ion-button [routerLink]=\\\"'/comments/create'\\\" fill=\\\"outline\\\" color=\\\"success\\\" slot=\\\"end\\\">\\n                    Crear {{'COMENTARIOS' | titlecase}}\\n                    <ion-icon name=\\\"add-circle-outline\\\" slot=\\\"end\\\"></ion-icon>\\n                </ion-button>\\n            </ion-item>\\n        </ng-container>\\n\\n    </ion-card>\\n\\n</ion-content>\\n\\n<ion-footer>\\n    <ion-row *ngIf=\\\"commentsService.meta\\\">\\n        <ion-col class=\\\"ion-text-center\\\" size=\\\"12\\\">\\n            <ion-button (click)=\\\"commentsService.getComments(commentsService.meta.current_page - 1)\\\"\\n                        [disabled]=\\\"commentsService.meta.current_page == 1\\\"\\n                        fill=\\\"clear\\\">\\n                <ion-icon slot=\\\"end\\\" name=\\\"play-outline\\\" style=\\\"transform: rotate(180deg);\\\"></ion-icon>\\n            </ion-button>\\n            <ion-button fill=\\\"clear\\\" [disabled]=\\\"true\\\"> Pag: {{commentsService.meta.current_page}}\\n                /{{commentsService.meta.last_page}} {{commentsService.meta.from}}-{{commentsService.meta.to}}\\n                /{{commentsService.meta.total}} </ion-button>\\n            <ion-button (click)=\\\"commentsService.getComments(commentsService.meta.current_page + 1)\\\"\\n                        [disabled]=\\\"commentsService.meta.current_page == commentsService.meta.last_page\\\"\\n                        fill=\\\"clear\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"play-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-col>\\n    </ion-row>\\n</ion-footer>\\n\";","export default \"<app-main-header title=\\\"COMENTARIOS\\\"></app-main-header>\\n\\n<ion-content>\\n\\n</ion-content>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbW1lbnRzL2NvbW1lbnRzLWNyZWF0ZS9jb21tZW50cy1jcmVhdGUuY29tcG9uZW50LnNjc3MifQ== */\";","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\nimport {CommentsService} from \"../comments.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Comment} from \"../comment\";\nimport {CommentsFormComponent} from \"../comments-form/comments-form.component\";\n\n@Component({\n    selector: 'app-comments-create',\n    templateUrl: './comments-create.component.html',\n    styleUrls: ['./comments-create.component.scss']\n})\nexport class CommentsCreateComponent implements OnInit, AfterViewInit {\n\n    @ViewChild('commentForm') commentForm: CommentsFormComponent;\n\n    id: any = null;\n    public formValid = false;\n\n    constructor(\n        public commentsService: CommentsService,\n        public route: ActivatedRoute\n    ) {\n\n    }\n\n    ngOnInit(): void {\n        this.clearPosts();\n    }\n\n    ngAfterViewInit() {\n        this.commentForm.commentsForm.valueChanges.subscribe((data) => {\n            this.commentsService.commentsFormValid.next(this.commentForm.commentsForm.valid);\n        });\n    }\n\n    clearPosts() {\n        console.log('clear');\n        this.commentsService.createComment();\n        this.commentsService.comment = <Comment>{};\n    }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbW1lbnRzL2NvbW1lbnRzLWR1cGxpY2F0ZS9jb21tZW50cy1kdXBsaWNhdGUuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-comments-duplicate',\n  templateUrl: './comments-duplicate.component.html',\n  styleUrls: ['./comments-duplicate.component.scss'],\n})\nexport class CommentsDuplicateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbW1lbnRzL2NvbW1lbnRzLWVkaXQvY29tbWVudHMtZWRpdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild, AfterViewInit} from '@angular/core';\nimport {CommentsService} from \"../comments.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Comment} from \"../comment\";\nimport {CommentsFormComponent} from \"../comments-form/comments-form.component\";\n\n@Component({\n  selector: 'app-comments-edit',\n  templateUrl: './comments-edit.component.html',\n  styleUrls: ['./comments-edit.component.scss']\n})\nexport class CommentsEditComponent implements OnInit, AfterViewInit {\n\n    @ViewChild('commentForm') commentForm: CommentsFormComponent;\n\n    public id: any = null;\n    public model: Comment = null;\n\n  constructor(\n      public commentsService: CommentsService,\n      public route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n      this.id = this.route.snapshot.paramMap.get('id');\n      this.commentsService.editComment(this.id);\n  }\n\n  ngAfterViewInit() {\n      this.commentForm.commentsForm.valueChanges.subscribe((data) => {\n          this.commentsService.commentsFormValid.next(this.commentForm.commentsForm.valid);\n      });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbW1lbnRzL2NvbW1lbnRzLWZvcm0vY29tbWVudHMtZm9ybS5jb21wb25lbnQuc2NzcyJ9 */\";","import {AfterViewInit, Component, Input, OnInit, ViewChild} from '@angular/core';\nimport {Comment} from \"../comment\";\nimport {FormGroup} from \"@angular/forms\";\nimport {CommentsService} from \"../comments.service\";\nimport {TitleCasePipe} from \"@angular/common\";\n\n@Component({\n    selector: 'app-comments-form',\n    templateUrl: './comments-form.component.html',\n    styleUrls: ['./comments-form.component.scss']\n})\nexport class CommentsFormComponent implements OnInit, AfterViewInit {\n\n    @Input('model') model: Comment = <Comment>{};\n\n    @ViewChild('commentsForm') commentsForm: FormGroup;\n\n    public validationMessages = {\n        'name': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('NOMBRE') + ' es obligatorio.'},\n        ],\n        'body': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('CUERPO') + ' es obligatorio.'},\n        ],\n        'post_id': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('ENTRADA') + ' es obligatorio.'},\n        ],\n    };\n\n    constructor(\n        public commentsService: CommentsService,\n        private toTitlecase: TitleCasePipe\n    ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n    }\n\n\n    // set setPostId\n\n    setPostId(event: any) {\n        this.commentsService.comment.post_id = event.value ? event.value.id : null;\n    }\n    // end setPostId\n\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbW1lbnRzL2NvbW1lbnRzLWxpc3QvY29tbWVudHMtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild} from '@angular/core';\nimport { CommentsService} from \"../comments.service\";\nimport {ApiService} from \"../../@shared/services/api.service\";\nimport {LoadingService} from \"../../@shared/services/loading.service\";\nimport {IonContent} from '@ionic/angular';\n\n@Component({\n    selector: 'app-comments-list',\n    templateUrl: './comments-list.component.html',\n    styleUrls: ['./comments-list.component.scss'],\n})\nexport class CommentsListComponent implements OnInit {\n\n    @ViewChild(IonContent, {static: false}) content: IonContent;\n\n    popover: any;\n\n    constructor(\n        public commentsService: CommentsService,\n        public api: ApiService,\n        public loading: LoadingService,\n    ) {\n    }\n\n    ngOnInit() {\n        this.commentsService.getComments();\n    }\n\n    public scrollToTop() {\n        this.content.scrollToTop(300);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CommentsPage } from './comments.page';\nimport {CommentsEditComponent} from \"./comments-edit/comments-edit.component\";\nimport {CommentsCreateComponent} from \"./comments-create/comments-create.component\";\nimport {CommentsListComponent} from \"./comments-list/comments-list.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CommentsListComponent\n    },\n    {\n      path: 'create',\n      component: CommentsCreateComponent\n    },\n    {\n        path: ':id/edit',\n        component: CommentsEditComponent\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [\n    RouterModule\n  ],\n})\nexport class CommentsPageRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {SharedModule} from '../@shared/shared.module';\n\nimport {CommentsPageRoutingModule} from './comments-routing.module';\n\nimport { CommentsPage} from './comments.page';\nimport { CommentsListComponent} from \"./comments-list/comments-list.component\";\nimport { CommentsCreateComponent} from \"./comments-create/comments-create.component\";\nimport { CommentsDuplicateComponent} from \"./comments-duplicate/comments-duplicate.component\";\nimport { CommentsEditComponent} from \"./comments-edit/comments-edit.component\";\nimport { CommentsFormComponent} from \"./comments-form/comments-form.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        SharedModule,\n        CommentsPageRoutingModule\n    ],\n    declarations: [\n        CommentsPage,\n        CommentsListComponent,\n        CommentsCreateComponent,\n        CommentsDuplicateComponent,\n        CommentsEditComponent,\n        CommentsFormComponent,\n    ]\n})\nexport class CommentsPageModule {\n}\n\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbW1lbnRzL2NvbW1lbnRzLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-comments',\n  templateUrl: './comments.page.html',\n  styleUrls: ['./comments.page.scss'],\n})\nexport class CommentsPage implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {ApiService} from \"../@shared/services/api.service\";\nimport { Comment, CommentLists } from \"./comment\";\nimport {Meta} from \"../@shared/interfaces/meta\";\nimport {AlertService} from \"../@shared/services/alert.service\";\nimport {ToastService} from \"../@shared/services/toast.service\";\nimport {NavigationService} from '../@shared/services/navigation.service'\nimport {BehaviorSubject} from \"rxjs\";\n\ndeclare var $: any;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CommentsService {\n\n    public commentsUrl = 'comments';\n    public commentsFormValid = new BehaviorSubject<boolean>(false);\n\n    public comments: Comment[] = [];\n    public comment: Comment = <Comment>{};\n    public commentLists: CommentLists = {};\n\n    public searchValue = '';\n    public perPage = 10;\n\n    public meta: Meta = null;\n\n    public page = 1;\n\n    public pagesContent = document.getElementById('pages-content');\n\n    constructor(\n        public api: ApiService,\n        public alert: AlertService,\n        public toast: ToastService,\n        public router: Router,\n        private navigation: NavigationService,\n    ) {\n    }\n\n    public getComments(page: any = this.page, perPage: any = this.perPage) {\n\n        this.api.get(this.commentsUrl + '?page=' + page + '&perPage=' + perPage + '&q[name:cont]=' + this.searchValue)\n            .subscribe(\n                (res: any) => {\n                    // @ts-ignore\n                    document.getElementById('pages-content').scrollToTop(300);\n                    this.comments = res.data;\n                    this.commentLists = res.lists;\n                    this.meta = res.meta;\n                },\n                (err: any) => {\n                    console.error(err);\n                }\n            );\n    }\n\n    public editComment(id: any) {\n        this.api.get(this.commentsUrl + '/' + id + '/edit')\n            .subscribe(\n                (res: any) => {\n                    this.comment = res.data.model;\n                    this.commentLists = res.lists;\n                },\n                (err: any) => {\n                    console.error(err);\n                }\n            );\n    }\n\n    public updateComment() {\n        this.api.put(this.commentsUrl + '/' + this.comment.id, {\n            model: this.comment,\n            pivots: {\n            }\n        }).subscribe(\n            (res: any) => {\n                this.toast.present(res.message, 'toast-success', 'top');\n                this.navigation.back();\n                this.getComments(1);\n            }\n        );\n    }\n\n    public createComment() {\n        this.api.get(this.commentsUrl + '/create')\n            .subscribe(\n                (res: any) => {\n                    this.comment = <Comment>{};\n                    this.commentLists = res.lists\n                }\n            );\n    }\n\n    public storeComment() {\n        this.api.post(this.commentsUrl, {\n            model: this.comment,\n            pivots: {\n            }\n        }).subscribe(\n            (res: any) => {\n                this.toast.present(res.message, 'toast-success', 'top');\n                this.navigation.back();\n                this.getComments(1);\n            }\n        );\n    }\n\n    public async deleteComment(id: any) {\n        const confirm = await this.alert.confirmation(\n            'Desea eliminar el item?'\n        );\n        if (confirm) {\n            this.api.delete(this.commentsUrl + '/' + id, {})\n                .subscribe(\n                    (res: any) => {\n                        this.toast.present(res.message, 'toast-success', 'top');\n                        this.getComments(1);\n                    }\n                );\n        } else {\n            return;\n        }\n    }\n\n}\n"]}