{"version":3,"sources":["./src/app/setting-groups/setting-groups-form/setting-groups-form.component.html","./src/app/setting-groups/setting-groups-list/setting-groups-list.component.html","./src/app/setting-groups/setting-groups-modal/setting-groups-modal.component.html","./src/app/setting-groups/setting-groups.page.html","./src/app/setting-groups/setting-groups-form/setting-groups-form.component.scss","./src/app/setting-groups/setting-groups-form/setting-groups-form.component.ts","./src/app/setting-groups/setting-groups-list/setting-groups-list.component.scss","./src/app/setting-groups/setting-groups-list/setting-groups-list.component.ts","./src/app/setting-groups/setting-groups-modal/setting-groups-modal.component.scss","./src/app/setting-groups/setting-groups-modal/setting-groups-modal.component.ts","./src/app/setting-groups/setting-groups-routing.module.ts","./src/app/setting-groups/setting-groups.module.ts","./src/app/setting-groups/setting-groups.page.scss","./src/app/setting-groups/setting-groups.page.ts","./src/app/setting-groups/setting-groups.service.ts"],"names":[],"mappings":"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","file":"setting-groups-setting-groups-module-es2015.js","sourcesContent":["export default \"<form #settingGroupsForm=\\\"ngForm\\\"\\n      novalidate\\n      autocomplete=\\\"off\\\">\\n    <ion-list>\\n\\n        <ion-item>\\n            <ion-label position=\\\"floating\\\">Nombre</ion-label>\\n            <ion-input type=\\\"text\\\"\\n                       [(ngModel)]=\\\"settingGroupsService.settingGroup.name\\\"\\n                       name=\\\"name\\\"\\n                       id=\\\"name-field\\\"\\n                       required></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.name\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"settingGroupsForm.form.controls['name']?.hasError(validation.type)\\\">\\n                    {{ validation.message }}\\n                </div>\\n            </ng-container>\\n        </div>\\n\\n        <app-settings-list></app-settings-list>\\n\\n    </ion-list>\\n</form>\\n\";","export default \"<ion-searchbar placeholder=\\\"Buscar grupos de parametros\\\"\\n               animated\\n               debounce=\\\"500\\\"\\n               (keyup.enter)=\\\"settingGroupsService.getSettingGroups()\\\"\\n               (ionCancel)=\\\"settingGroupsService.search = ''\\\"\\n               (ionChange)=\\\"settingGroupsService.getSettingGroups()\\\"\\n               [showCancelButton]=\\\"'focus'\\\"\\n               [cancelButtonText]=\\\"'cancelar'\\\"\\n               [(ngModel)]=\\\"settingGroupsService.search\\\"></ion-searchbar>\\n<ion-list>\\n    <ion-list-header>\\n        Grupos de parametros\\n    </ion-list-header>\\n    <ng-container *ngIf=\\\"settingGroupsService?.settingGroups?.length\\\">\\n\\n        <ng-container *ngFor=\\\"let settingGroup of settingGroupsService?.settingGroups\\\">\\n            <ion-item-sliding>\\n                <ion-item (click)=\\\"settingGroupsService.getSettingGroup(settingGroup.code); openModal('Editar')\\\">\\n                    <ion-label>\\n                        {{settingGroup.name}}\\n                        <h3>{{settingGroup.code}}</h3>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item-options side=\\\"end\\\">\\n                    <ion-item-option color=\\\"danger\\\"\\n                                     (click)=\\\"settingGroupsService.deleteSettingGroup(settingGroup)\\\">\\n                        <ion-icon name=\\\"trash\\\"\\n                                  class=\\\"icon-s\\\"></ion-icon>\\n                    </ion-item-option>\\n                </ion-item-options>\\n            </ion-item-sliding>\\n        </ng-container>\\n\\n    </ng-container>\\n\\n    <ng-container *ngIf=\\\"!settingGroupsService?.settingGroups?.length\\\">\\n        <ion-item>\\n            <ion-label>Sin grupos de parametros</ion-label>\\n            <ion-button (click)=\\\"settingGroupsService.settingGroup = {}; openModal()\\\"\\n                        slot=\\\"end\\\"\\n                        fill=\\\"outline\\\"\\n                        color=\\\"success\\\">\\n                Crear grupos de parametros\\n                <ion-icon name=\\\"add-circle-outline\\\" slot=\\\"end\\\"></ion-icon>\\n            </ion-button>\\n        </ion-item>\\n    </ng-container>\\n\\n</ion-list>\\n\\n\\n\";","export default \"<!-- my-modal.page.html -->\\n<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-button (click)=\\\"closeModal()\\\">\\n                <ion-icon slot=\\\"icon-only\\\"\\n                          [name]=\\\"'arrow-back-outline'\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-buttons slot=\\\"primary\\\">\\n            <ion-button color=\\\"success\\\"\\n                        (click)=\\\"settingGroupsService.saveSettingGroup(); closeModal()\\\"\\n                        [disabled]=\\\"!settingGroupsFormComponent?.settingGroupsForm?.valid\\\">\\n                <ion-icon slot=\\\"icon-only\\\"\\n                          [name]=\\\"'save-outline'\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-title>{{action}} Grupo de parametros</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n\\n    <app-setting-groups-form #settingGroupsFormComponent></app-setting-groups-form>\\n\\n</ion-content>\\n\";","export default \"<ion-header translucent=\\\"true\\\">\\n  <ion-toolbar>\\n      <ion-buttons slot=\\\"start\\\">\\n          <ion-menu-toggle auto-hide=\\\"false\\\" menu=\\\"main-menu\\\">\\n              <ion-button (click)=\\\"toggleMenu()\\\">\\n                  <ion-icon slot=\\\"icon-only\\\" name=\\\"menu\\\"></ion-icon>\\n              </ion-button>\\n          </ion-menu-toggle>\\n      </ion-buttons>\\n      <ion-buttons slot=\\\"primary\\\">\\n          <ion-button color=\\\"success\\\"\\n                      (click)=\\\"settingGroupsService.settingGroup = {}; openModal('Crear')\\\">\\n              <ion-icon slot=\\\"icon-only\\\" [name]=\\\"'add-circle-outline'\\\"></ion-icon>\\n          </ion-button>\\n      </ion-buttons>\\n    <ion-title>Grupos de parametros</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n    <app-setting-groups-list></app-setting-groups-list>\\n\\n</ion-content>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmctZ3JvdXBzL3NldHRpbmctZ3JvdXBzLWZvcm0vc2V0dGluZy1ncm91cHMtZm9ybS5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {FormGroup} from \"@angular/forms\";\nimport {SettingGroupsService} from \"../setting-groups.service\";\n\n@Component({\n  selector: 'app-setting-groups-form',\n  templateUrl: './setting-groups-form.component.html',\n  styleUrls: ['./setting-groups-form.component.scss'],\n})\nexport class SettingGroupsFormComponent implements OnInit {\n\n  @ViewChild('settingGroupsForm') settingGroupsForm: FormGroup;\n  public validationMessages = {\n    'name': [\n      {type: 'required', message: 'El campo nombre es obligatorio.'},\n    ],\n  };\n\n\n  constructor(\n      public settingGroupsService: SettingGroupsService\n  ) { }\n\n  ngOnInit() {}\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmctZ3JvdXBzL3NldHRpbmctZ3JvdXBzLWxpc3Qvc2V0dGluZy1ncm91cHMtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {SettingGroupsService} from \"../setting-groups.service\";\nimport {SettingGroupsPage} from \"../setting-groups.page\";\nimport {SettingGroupsModalComponent} from \"../setting-groups-modal/setting-groups-modal.component\";\nimport {ModalController} from \"@ionic/angular\";\n\n\n@Component({\n  selector: 'app-setting-groups-list',\n  templateUrl: './setting-groups-list.component.html',\n  styleUrls: ['./setting-groups-list.component.scss'],\n})\nexport class SettingGroupsListComponent implements OnInit {\n\n  @ViewChild('settingGroupsPage') settingGroupsPage: SettingGroupsPage\n\n  dataReturned: any;\n\n  constructor(\n      public settingGroupsService: SettingGroupsService,\n      public modalController: ModalController,\n  ) { }\n\n  ngOnInit() {\n    this.settingGroupsService.getSettingGroups();\n  }\n\n  async openModal(action = null) {\n    const modal = await this.modalController.create({\n      component: SettingGroupsModalComponent,\n      componentProps: {\n        action: action ?? ''\n      }\n    });\n\n    modal.onDidDismiss().then((dataReturned) => {\n      if (dataReturned !== null) {\n        this.dataReturned = dataReturned.data;\n        console.table(dataReturned);\n      }\n    });\n\n    return await modal.present();\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmctZ3JvdXBzL3NldHRpbmctZ3JvdXBzLW1vZGFsL3NldHRpbmctZ3JvdXBzLW1vZGFsLmNvbXBvbmVudC5zY3NzIn0= */\";","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\nimport {ModalController, NavParams} from \"@ionic/angular\";\nimport {SettingGroupsFormComponent} from \"../setting-groups-form/setting-groups-form.component\";\nimport {SettingGroupsService} from \"../setting-groups.service\";\n\n@Component({\n  selector: 'app-setting-groups-modal',\n  templateUrl: './setting-groups-modal.component.html',\n  styleUrls: ['./setting-groups-modal.component.scss'],\n})\nexport class SettingGroupsModalComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('settingGroupsFormComponent') settingGroupsFormComponent: SettingGroupsFormComponent;\n\n  action: string;\n\n  constructor(\n      private modalController: ModalController,\n      private navParams: NavParams,\n      public settingGroupsService: SettingGroupsService\n  ) { }\n\n  ngOnInit() {\n    console.table(this.navParams);\n    this.action = this.navParams.data.action;\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  async closeModal() {\n    const onClosedData: string = \"Wrapped Up!\";\n    await this.modalController.dismiss(onClosedData);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingGroupsPage } from './setting-groups.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingGroupsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingGroupsPageRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {SettingGroupsPageRoutingModule} from './setting-groups-routing.module';\n\nimport {SettingGroupsPage} from './setting-groups.page';\nimport {SharedModule} from \"../@shared/shared.module\";\nimport {SettingGroupsService} from \"./setting-groups.service\";\nimport {SettingGroupsListComponent} from \"./setting-groups-list/setting-groups-list.component\";\nimport {SettingGroupsFormComponent} from \"./setting-groups-form/setting-groups-form.component\";\nimport {SettingGroupsModalComponent} from \"./setting-groups-modal/setting-groups-modal.component\";\nimport {SettingsListComponent} from \"../settings/settings-list/settings-list.component\";\nimport {SettingsService} from \"../settings/settings.service\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        SharedModule,\n        SettingGroupsPageRoutingModule\n    ],\n    providers: [\n        SettingGroupsService,\n        SettingsService,\n    ],\n    declarations: [\n        SettingGroupsPage,\n        SettingGroupsListComponent,\n        SettingGroupsFormComponent,\n        SettingGroupsModalComponent,\n        SettingsListComponent,\n    ]\n})\nexport class SettingGroupsPageModule {\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmctZ3JvdXBzL3NldHRpbmctZ3JvdXBzLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport {ModalController} from \"@ionic/angular\";\nimport {SettingGroupsModalComponent} from \"./setting-groups-modal/setting-groups-modal.component\";\nimport {SettingGroupsService} from \"./setting-groups.service\";\n// import {SettingGroupsService} from \"./setting-groups.service\";\n\n@Component({\n  selector: 'app-setting-groups',\n  templateUrl: './setting-groups.page.html',\n  styleUrls: ['./setting-groups.page.scss'],\n})\nexport class SettingGroupsPage implements OnInit {\n\n  dataReturned: any;\n\n  constructor(\n      public modalController: ModalController,\n      public settingGroupsService: SettingGroupsService\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n  toggleMenu() {\n    const splitPane = document.querySelector('ion-split-pane');\n    const windowWidth = window.innerWidth;\n    const splitPaneShownAt = 992;\n    const when = `(min-width: ${splitPaneShownAt}px)`;\n    if (windowWidth >= splitPaneShownAt) {\n      // split pane view is visible\n      const open = splitPane.when === when;\n      splitPane.when = open ? false : when;\n    } else {\n      // split pane view is not visible\n      // toggle menu open\n      const menu = splitPane.querySelector('ion-menu');\n      return menu.open();\n    }\n  }\n\n  async openModal(action = null) {\n    const modal = await this.modalController.create({\n      component: SettingGroupsModalComponent,\n      componentProps: {\n        action: action ?? ''\n      }\n    });\n\n    modal.onDidDismiss().then((dataReturned) => {\n      if (dataReturned !== null) {\n        this.dataReturned = dataReturned.data;\n        // console.table(dataReturned);\n      }\n    });\n\n    return await modal.present();\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ApiService} from \"../@shared/services/api.service\";\nimport {ToastService} from \"../@shared/services/toast.service\";\nimport {AlertService} from \"../@shared/services/alert.service\";\nimport {AuthService} from \"../@shared/services/auth.service\";\nimport {StorageLocalService} from \"../@shared/services/storage-local.service\";\nimport {SettingGroup} from \"./setting-group\";\nimport {Setting} from \"../settings/setting\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SettingGroupsService {\n\n    public settingGroups: SettingGroup[];\n    public settingGroup: SettingGroup;\n\n    public search: string = '';\n    public searchId: string = '';\n    public searchName: string = '';\n    public searchCode: string = '';\n    public searchSettingsName: string = '';\n    public searchSettingsCode: string = '';\n\n    constructor(\n        public api: ApiService,\n        public toast: ToastService,\n        public alert: AlertService,\n        public auth: AuthService,\n    ) {\n        //\n        this.newSettingGroup();\n        this.settingGroups = [];\n    }\n\n    /**\n     * Get SettingGroups\n     * @param page\n     */\n    public getSettingGroups(page: any = 1) {\n        const searchString = this.search ? `&q[name:cont]=${this.search}&q[code:cont]=${this.search}&q[settings.name:cont]=${this.search}&q[settings.code:cont]=${this.search}` : '';\n        this.api.get(`setting-groups?page=${page}${searchString}`)\n            .subscribe(\n                (res: any) => {\n                    this.settingGroups = res.data;\n                }\n            );\n    }\n\n    /**\n     * Get SettingGroups\n     * @param code\n     */\n    public getSettingGroup(code: any) {\n        this.api.get(`setting-groups/${code}`)\n            .subscribe(\n                (res: any) => {\n                    this.settingGroup = res.data;\n                }\n            );\n    }\n\n    /**\n     * Save SettingGroups\n     */\n    public saveSettingGroup() {\n        if (this.settingGroup.id) {\n            this.updateSettingGroup();\n        }\n\n        if (!this.settingGroup.id) {\n            this.storeSettingGroup();\n        }\n    }\n\n    /**\n     * Store SettingGroup\n     */\n    private storeSettingGroup() {\n        this.api.post('setting-groups', this.settingGroup)\n            .subscribe(\n                (res: any) => {\n                    this.toast.present(res.message, 'toast-success');\n                    this.getSettingGroups();\n                },\n                (err: any) => {\n\n                }\n            );\n    }\n\n    /**\n     * Update SettingGroup\n     */\n    private updateSettingGroup() {\n        this.api.put(`setting-groups/${this.settingGroup.code}`, this.settingGroup)\n            .subscribe(\n                (res: any) => {\n                    this.toast.present(res.message, 'toast-success');\n                    this.getSettingGroups();\n                },\n                (err: any) => {\n\n                }\n            );\n    }\n\n    /**\n     * Delete SettingGroup\n     * @param settingGroup\n     */\n    public deleteSettingGroup(settingGroup: SettingGroup) {\n        this.alert.confirmation(`Eliminar ${settingGroup.name}?`)\n            .then(res => {\n                if (res) {\n                    this.api.delete(`setting-groups/${settingGroup.code}`, {})\n                        .subscribe(\n                            (res: any) => {\n                                this.toast.present(res.message, 'toast-success');\n                                this.getSettingGroups();\n                            },\n                            (err: any) => {\n\n                            }\n                        );\n                }\n            });\n        return;\n    }\n\n    /**\n     * Create empty SettingGroup\n     */\n    newSettingGroup() {\n        this.settingGroup = {\n            id: null,\n            name: null,\n            code: null,\n            created_at: null,\n            updated_at: null,\n            settings: [],\n        };\n    }\n\n}\n"],"sourceRoot":"webpack:///"}