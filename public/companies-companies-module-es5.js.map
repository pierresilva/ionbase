{"version":3,"sources":["webpack:///src/app/companies/companies-create/companies-create.component.html","webpack:///src/app/companies/companies-duplicate/companies-duplicate.component.html","webpack:///src/app/companies/companies-edit/companies-edit.component.html","webpack:///src/app/companies/companies-form/companies-form.component.html","webpack:///src/app/companies/companies-list/companies-list.component.html","webpack:///src/app/companies/companies.page.html","webpack:///src/app/companies/companies-create/companies-create.component.scss","webpack:///src/app/companies/companies-create/companies-create.component.ts","webpack:///src/app/companies/companies-duplicate/companies-duplicate.component.scss","webpack:///src/app/companies/companies-duplicate/companies-duplicate.component.ts","webpack:///src/app/companies/companies-edit/companies-edit.component.scss","webpack:///src/app/companies/companies-edit/companies-edit.component.ts","webpack:///src/app/companies/companies-form/companies-form.component.scss","webpack:///src/app/companies/companies-form/companies-form.component.ts","webpack:///src/app/companies/companies-list/companies-list.component.scss","webpack:///src/app/companies/companies-list/companies-list.component.ts","webpack:///src/app/companies/companies-routing.module.ts","webpack:///src/app/companies/companies.module.ts","webpack:///src/app/companies/companies.page.scss","webpack:///src/app/companies/companies.page.ts","webpack:///src/app/companies/companies.service.ts"],"names":["CompaniesCreateComponent","companiesService","route","platform","splitPanel","id","formValid","clearPosts","show","next","companyForm","companiesForm","valueChanges","subscribe","data","companiesFormValid","valid","console","log","createCompany","company","selector","template","CompaniesDuplicateComponent","CompaniesEditComponent","model","snapshot","paramMap","get","editCompany","CompaniesFormComponent","toTitlecase","validationMessages","type","message","transform","event","compPhoneIds","value","length","i","push","comp_phone_ids","compAddressIds","comp_address_ids","compContactIds","comp_contact_ids","compResponsabilityIds","comp_responsability_ids","CompaniesListComponent","api","loading","getCompanies","content","scrollToTop","routes","path","component","CompaniesPageRoutingModule","imports","forChild","exports","CompaniesPageModule","declarations","CompaniesPage","CompaniesService","alert","toast","router","navigation","companiesUrl","companies","companyLists","searchValue","perPage","meta","page","pagesContent","document","getElementById","res","lists","err","error","put","pivots","present","back","post","confirmation","confirm","providedIn"],"mappings":"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","file":"companies-companies-module-es5.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <!-- <ion-button [routerLink]=\\\"'/companies'\\\">\\r\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back-outline\\\"></ion-icon>\\r\\n            </ion-button> -->\\r\\n            <ion-back-button\\r\\n              [text]=\\\"''\\\"\\r\\n              [icon]=\\\"'arrow-back-outline'\\\">\\r\\n            </ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <ion-buttons slot=\\\"primary\\\">\\r\\n            <ion-button (click)=\\\"companiesService.storeCompany()\\\"\\r\\n                        color=\\\"success\\\"\\r\\n                        fill=\\\"clear\\\"\\r\\n                        [disabled]=\\\"!companiesService.companiesFormValid.value\\\">\\r\\n                        <ng-container *ngIf=\\\"!platform.is('mobile')\\\">Guardar</ng-container>\\r\\n                <ion-icon slot=\\\"end\\\" color=\\\"success\\\" name=\\\"save-outline\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <ion-title>Crear {{'EMPRESAS' | titlecase}}</ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content fullscreen>\\r\\n    <ion-card>\\r\\n        <app-companies-form #companyForm [model]=\\\"companiesService.company\\\"></app-companies-form>\\r\\n    </ion-card>\\r\\n\\r\\n</ion-content>\\r\\n\";","export default \"<p>\\r\\n  Companies duplicate works!\\r\\n</p>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <!-- <ion-button [routerLink]=\\\"'/companies'\\\">\\r\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back-outline\\\"></ion-icon>\\r\\n            </ion-button> -->\\r\\n            <ion-back-button\\r\\n              [text]=\\\"''\\\"\\r\\n              [icon]=\\\"'arrow-back-outline'\\\">\\r\\n            </ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <ion-buttons slot=\\\"primary\\\">\\r\\n            <ion-button (click)=\\\"companiesService.updateCompany()\\\"\\r\\n                        color=\\\"success\\\"\\r\\n                        fill=\\\"clear\\\"\\r\\n                        [disabled]=\\\"!companiesService.companiesFormValid.value\\\">\\r\\n                        <ng-container *ngIf=\\\"!platform.is('mobile')\\\">Guardar</ng-container>\\r\\n                <ion-icon slot=\\\"end\\\" color=\\\"success\\\" name=\\\"save-outline\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <ion-title>Editar {{'EMPRESAS' | titlecase}}: {{ companiesService.company?.name }}</ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content fullscreen>\\r\\n    <ion-card>\\r\\n            <app-companies-form #companyForm [model]=\\\"companiesService.company\\\"></app-companies-form>\\r\\n    </ion-card>\\r\\n\\r\\n</ion-content>\\r\\n\";","export default \"<form #companiesForm=\\\"ngForm\\\" novalidate autocomplete=\\\"off\\\">\\r\\n\\r\\n\\r\\n    <!-- comp_phone_ids -->\\r\\n    <ion-item class=\\\"item-transparent\\\">\\r\\n        <ion-label>{{ 'TELÉFONOS DE EMPRESAS' | titlecase }}</ion-label>\\r\\n        <ionic-selectable name=\\\"comp_phone_ids\\\"\\r\\n                          id=\\\"comp_phone_ids-field\\\"\\r\\n                          [(ngModel)]=\\\"model.comp_phones\\\"\\r\\n                          [items]=\\\"companiesService.companyLists.CompPhone\\\"\\r\\n                          itemValueField=\\\"id\\\"\\r\\n                          itemTextField=\\\"name\\\"\\r\\n                          [isMultiple]=\\\"true\\\"\\r\\n                          [canClear]=\\\"true\\\"\\r\\n                          [hasConfirmButton]=\\\"true\\\"\\r\\n                          [confirmButtonText]=\\\"'Seleccionar'\\\"\\r\\n                          [searchPlaceholder]=\\\"'Buscar ' + ('TELÉFONOS DE EMPRESAS' | titlecase)\\\"\\r\\n                          [searchFailText]=\\\"'No se encontro ' + ('TELÉFONOS DE EMPRESAS' | titlecase) + ' que coincida!'\\\"\\r\\n                          [closeButtonText]=\\\"'Cancelar'\\\"\\r\\n                          [clearButtonText]=\\\"'Limpiar'\\\"\\r\\n                          [canSearch]=\\\"true\\\"\\r\\n                          (onChange)=\\\"setCompPhoneIds($event)\\\">\\r\\n        </ionic-selectable>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n        <ng-container *ngFor=\\\"let validation of validationMessages.comp_phone_ids\\\">\\r\\n            <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['comp_phone_ids']?.hasError(validation.type)\\\">\\r\\n            {{ validation.message }}\\r\\n            </div>\\r\\n        </ng-container>\\r\\n    </div>\\r\\n    <!-- end comp_phone_ids -->\\r\\n\\r\\n\\r\\n    <!-- comp_address_ids -->\\r\\n    <ion-item class=\\\"item-transparent\\\">\\r\\n        <ion-label>{{ 'EMPRESAS DIRECCIONES' | titlecase }}</ion-label>\\r\\n        <ionic-selectable name=\\\"comp_address_ids\\\"\\r\\n                          id=\\\"comp_address_ids-field\\\"\\r\\n                          [(ngModel)]=\\\"model.comp_addresses\\\"\\r\\n                          [items]=\\\"companiesService.companyLists.CompAddress\\\"\\r\\n                          itemValueField=\\\"id\\\"\\r\\n                          itemTextField=\\\"name\\\"\\r\\n                          [isMultiple]=\\\"true\\\"\\r\\n                          [canClear]=\\\"true\\\"\\r\\n                          [hasConfirmButton]=\\\"true\\\"\\r\\n                          [confirmButtonText]=\\\"'Seleccionar'\\\"\\r\\n                          [searchPlaceholder]=\\\"'Buscar ' + ('EMPRESAS DIRECCIONES' | titlecase)\\\"\\r\\n                          [searchFailText]=\\\"'No se encontro ' + ('EMPRESAS DIRECCIONES' | titlecase) + ' que coincida!'\\\"\\r\\n                          [closeButtonText]=\\\"'Cancelar'\\\"\\r\\n                          [clearButtonText]=\\\"'Limpiar'\\\"\\r\\n                          [canSearch]=\\\"true\\\"\\r\\n                          (onChange)=\\\"setCompAddressIds($event)\\\">\\r\\n        </ionic-selectable>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n        <ng-container *ngFor=\\\"let validation of validationMessages.comp_address_ids\\\">\\r\\n            <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['comp_address_ids']?.hasError(validation.type)\\\">\\r\\n            {{ validation.message }}\\r\\n            </div>\\r\\n        </ng-container>\\r\\n    </div>\\r\\n    <!-- end comp_address_ids -->\\r\\n\\r\\n\\r\\n    <!-- comp_contact_ids -->\\r\\n    <ion-item class=\\\"item-transparent\\\">\\r\\n        <ion-label>{{ 'EMPRESAS CONTACTOS' | titlecase }}</ion-label>\\r\\n        <ionic-selectable name=\\\"comp_contact_ids\\\"\\r\\n                          id=\\\"comp_contact_ids-field\\\"\\r\\n                          [(ngModel)]=\\\"model.comp_contacts\\\"\\r\\n                          [items]=\\\"companiesService.companyLists.CompContact\\\"\\r\\n                          itemValueField=\\\"id\\\"\\r\\n                          itemTextField=\\\"name\\\"\\r\\n                          [isMultiple]=\\\"true\\\"\\r\\n                          [canClear]=\\\"true\\\"\\r\\n                          [hasConfirmButton]=\\\"true\\\"\\r\\n                          [confirmButtonText]=\\\"'Seleccionar'\\\"\\r\\n                          [searchPlaceholder]=\\\"'Buscar ' + ('EMPRESAS CONTACTOS' | titlecase)\\\"\\r\\n                          [searchFailText]=\\\"'No se encontro ' + ('EMPRESAS CONTACTOS' | titlecase) + ' que coincida!'\\\"\\r\\n                          [closeButtonText]=\\\"'Cancelar'\\\"\\r\\n                          [clearButtonText]=\\\"'Limpiar'\\\"\\r\\n                          [canSearch]=\\\"true\\\"\\r\\n                          (onChange)=\\\"setCompContactIds($event)\\\">\\r\\n        </ionic-selectable>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n        <ng-container *ngFor=\\\"let validation of validationMessages.comp_contact_ids\\\">\\r\\n            <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['comp_contact_ids']?.hasError(validation.type)\\\">\\r\\n            {{ validation.message }}\\r\\n            </div>\\r\\n        </ng-container>\\r\\n    </div>\\r\\n    <!-- end comp_contact_ids -->\\r\\n\\r\\n\\r\\n    <!-- comp_responsability_ids -->\\r\\n    <ion-item class=\\\"item-transparent\\\">\\r\\n        <ion-label>{{ 'EMPRESAS RESPONSABILIDADES LEGALES' | titlecase }}</ion-label>\\r\\n        <ionic-selectable name=\\\"comp_responsability_ids\\\"\\r\\n                          id=\\\"comp_responsability_ids-field\\\"\\r\\n                          [(ngModel)]=\\\"model.comp_responsabilities\\\"\\r\\n                          [items]=\\\"companiesService.companyLists.CompResponsability\\\"\\r\\n                          itemValueField=\\\"id\\\"\\r\\n                          itemTextField=\\\"name\\\"\\r\\n                          [isMultiple]=\\\"true\\\"\\r\\n                          [canClear]=\\\"true\\\"\\r\\n                          [hasConfirmButton]=\\\"true\\\"\\r\\n                          [confirmButtonText]=\\\"'Seleccionar'\\\"\\r\\n                          [searchPlaceholder]=\\\"'Buscar ' + ('EMPRESAS RESPONSABILIDADES LEGALES' | titlecase)\\\"\\r\\n                          [searchFailText]=\\\"'No se encontro ' + ('EMPRESAS RESPONSABILIDADES LEGALES' | titlecase) + ' que coincida!'\\\"\\r\\n                          [closeButtonText]=\\\"'Cancelar'\\\"\\r\\n                          [clearButtonText]=\\\"'Limpiar'\\\"\\r\\n                          [canSearch]=\\\"true\\\"\\r\\n                          (onChange)=\\\"setCompResponsabilityIds($event)\\\">\\r\\n        </ionic-selectable>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n        <ng-container *ngFor=\\\"let validation of validationMessages.comp_responsability_ids\\\">\\r\\n            <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['comp_responsability_ids']?.hasError(validation.type)\\\">\\r\\n            {{ validation.message }}\\r\\n            </div>\\r\\n        </ng-container>\\r\\n    </div>\\r\\n    <!-- end comp_responsability_ids -->\\r\\n\\r\\n\\r\\n            <!-- name -->\\r\\n            <ion-item class=\\\"item-transparent\\\">\\r\\n                <ion-label>{{ 'NOMBRE' | titlecase }}</ion-label>\\r\\n                <ion-input [(ngModel)]=\\\"model.name\\\"\\r\\n                            type=\\\"text\\\"\\r\\n                            name=\\\"name\\\"\\r\\n                            id=\\\"name-field\\\"\\r\\n                            [required]=\\\"true\\\"\\r\\n                            placeholder=\\\"\\\"></ion-input>\\r\\n            </ion-item>\\r\\n            <div class=\\\"validation-errors\\\">\\r\\n                <ng-container *ngFor=\\\"let validation of validationMessages.name\\\">\\r\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['name']?.hasError(validation.type)\\\">\\r\\n                        {{ validation.message }}\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            </div>\\r\\n            <!-- end name -->\\r\\n\\r\\n\\r\\n            <!-- code -->\\r\\n            <ion-item class=\\\"item-transparent\\\">\\r\\n                <ion-label>{{ 'CÓDIGO' | titlecase }}</ion-label>\\r\\n                <ion-input [(ngModel)]=\\\"model.code\\\"\\r\\n                            type=\\\"text\\\"\\r\\n                            name=\\\"code\\\"\\r\\n                            id=\\\"code-field\\\"\\r\\n                            [required]=\\\"true\\\"\\r\\n                            placeholder=\\\"\\\"></ion-input>\\r\\n            </ion-item>\\r\\n            <div class=\\\"validation-errors\\\">\\r\\n                <ng-container *ngFor=\\\"let validation of validationMessages.code\\\">\\r\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['code']?.hasError(validation.type)\\\">\\r\\n                        {{ validation.message }}\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            </div>\\r\\n            <!-- end code -->\\r\\n\\r\\n\\r\\n            <!-- nit -->\\r\\n            <ion-item class=\\\"item-transparent\\\">\\r\\n                <ion-label>{{ 'NIT' | titlecase }}</ion-label>\\r\\n                <ion-input [(ngModel)]=\\\"model.nit\\\"\\r\\n                            type=\\\"text\\\"\\r\\n                            name=\\\"nit\\\"\\r\\n                            id=\\\"nit-field\\\"\\r\\n                            [required]=\\\"true\\\"\\r\\n                            placeholder=\\\"\\\"></ion-input>\\r\\n            </ion-item>\\r\\n            <div class=\\\"validation-errors\\\">\\r\\n                <ng-container *ngFor=\\\"let validation of validationMessages.nit\\\">\\r\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['nit']?.hasError(validation.type)\\\">\\r\\n                        {{ validation.message }}\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            </div>\\r\\n            <!-- end nit -->\\r\\n\\r\\n\\r\\n            <!-- manager_name -->\\r\\n            <ion-item class=\\\"item-transparent\\\">\\r\\n                <ion-label>{{ 'NOMBRE REPRESENTANTE LEGAL' | titlecase }}</ion-label>\\r\\n                <ion-input [(ngModel)]=\\\"model.manager_name\\\"\\r\\n                            type=\\\"text\\\"\\r\\n                            name=\\\"manager_name\\\"\\r\\n                            id=\\\"manager_name-field\\\"\\r\\n                            [required]=\\\"true\\\"\\r\\n                            placeholder=\\\"\\\"></ion-input>\\r\\n            </ion-item>\\r\\n            <div class=\\\"validation-errors\\\">\\r\\n                <ng-container *ngFor=\\\"let validation of validationMessages.manager_name\\\">\\r\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['manager_name']?.hasError(validation.type)\\\">\\r\\n                        {{ validation.message }}\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            </div>\\r\\n            <!-- end manager_name -->\\r\\n\\r\\n\\r\\n            <!-- manager_document -->\\r\\n            <ion-item class=\\\"item-transparent\\\">\\r\\n                <ion-label>{{ 'CÉDULA REPRESENTANTE LEGAL' | titlecase }}</ion-label>\\r\\n                <ion-input [(ngModel)]=\\\"model.manager_document\\\"\\r\\n                            type=\\\"text\\\"\\r\\n                            name=\\\"manager_document\\\"\\r\\n                            id=\\\"manager_document-field\\\"\\r\\n                            [required]=\\\"true\\\"\\r\\n                            placeholder=\\\"\\\"></ion-input>\\r\\n            </ion-item>\\r\\n            <div class=\\\"validation-errors\\\">\\r\\n                <ng-container *ngFor=\\\"let validation of validationMessages.manager_document\\\">\\r\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['manager_document']?.hasError(validation.type)\\\">\\r\\n                        {{ validation.message }}\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            </div>\\r\\n            <!-- end manager_document -->\\r\\n\\r\\n\\r\\n            <!-- logo -->\\r\\n            <ion-item class=\\\"item-transparent\\\">\\r\\n                <ion-label>{{ 'LOGOTIPO' | titlecase }}</ion-label>\\r\\n                <ion-input [(ngModel)]=\\\"model.logo\\\"\\r\\n                            type=\\\"text\\\"\\r\\n                            name=\\\"logo\\\"\\r\\n                            id=\\\"logo-field\\\"\\r\\n                            placeholder=\\\"\\\"></ion-input>\\r\\n            </ion-item>\\r\\n            <div class=\\\"validation-errors\\\">\\r\\n                <ng-container *ngFor=\\\"let validation of validationMessages.logo\\\">\\r\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['logo']?.hasError(validation.type)\\\">\\r\\n                        {{ validation.message }}\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            </div>\\r\\n            <!-- end logo -->\\r\\n\\r\\n\\r\\n            <!-- main -->\\r\\n            <ion-item class=\\\"item-transparent\\\">\\r\\n                <ion-label>{{ 'PRINCIPAL' | titlecase }}</ion-label>\\r\\n                <ion-toggle name=\\\"main\\\"\\r\\n                            id=\\\"main-field\\\"\\r\\n                            slot=\\\"end\\\"\\r\\n                            [(ngModel)]=\\\"model.main\\\"></ion-toggle>\\r\\n            </ion-item>\\r\\n            <div class=\\\"validation-errors\\\">\\r\\n                <ng-container *ngFor=\\\"let validation of validationMessages.main\\\">\\r\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"companiesForm.form.controls['main']?.hasError(validation.type)\\\">\\r\\n                        {{ validation.message }}\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            </div>\\r\\n            <!-- end main -->\\r\\n\\r\\n\\r\\n</form>\\r\\n\";","export default \"<app-main-header title=\\\"{{'EMPRESAS' | titlecase}}\\\"\\r\\n                 primaryLink=\\\"companies/create\\\"\\r\\n                 primaryText=\\\"Crear {{'EMPRESAS' | lowercase}}\\\"\\r\\n                 primaryIcon=\\\"add-circle-outline\\\"></app-main-header>\\r\\n\\r\\n<ion-content id=\\\"pages-content\\\">\\r\\n\\r\\n    <ion-searchbar showCancelButton=\\\"focus\\\"\\r\\n                       [cancelButtonText]=\\\"'Cancelar'\\\"\\r\\n                       [placeholder]=\\\"'Buscar ' + ('EMPRESAS' | lowercase )\\\"\\r\\n                       (ionCancel)=\\\"this.companiesService.searchValue = ''; companiesService.getCompanies()\\\"\\r\\n                       (keyup.enter)=\\\"companiesService.getCompanies()\\\"\\r\\n                       [(ngModel)]=\\\"companiesService.searchValue\\\"></ion-searchbar>\\r\\n\\r\\n    <ng-container *ngIf=\\\"!(loading.loading | async) && companiesService.companies?.length\\\">\\r\\n        <ion-card *ngFor=\\\"let company of companiesService.companies; let index = index\\\">\\r\\n            <ion-list>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'NOMBRE' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">{{ company?.name }}</div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'CÓDIGO' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">{{ company?.code }}</div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'NIT' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">{{ company?.nit }}</div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'NOMBRE REPRESENTANTE LEGAL' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">{{ company?.manager_name }}</div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'CÉDULA REPRESENTANTE LEGAL' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">{{ company?.manager_document }}</div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'LOGOTIPO' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">{{ company?.logo }}</div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'PRINCIPAL' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">{{ company?.main  ? 'Si' : 'No' }}</div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'TELÉFONOS DE EMPRESAS' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">\\r\\n                            <ng-container *ngIf=\\\"company?.comp_phones?.length\\\">\\r\\n                                <ng-container *ngFor=\\\"let compPhone of company?.comp_phones; let last = last\\\">\\r\\n                                    <a routerLink=\\\"/comp-phones/{{ compPhone?.id }}/edit\\\">{{ compPhone?.name }}</a><span *ngIf=\\\"!last\\\">, </span>\\r\\n                                </ng-container>\\r\\n                            </ng-container>\\r\\n                        </div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'EMPRESAS DIRECCIONES' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">\\r\\n                            <ng-container *ngIf=\\\"company?.comp_addresses?.length\\\">\\r\\n                                <ng-container *ngFor=\\\"let compAddress of company?.comp_addresses; let last = last\\\">\\r\\n                                    <a routerLink=\\\"/comp-addresses/{{ compAddress?.id }}/edit\\\">{{ compAddress?.name }}</a><span *ngIf=\\\"!last\\\">, </span>\\r\\n                                </ng-container>\\r\\n                            </ng-container>\\r\\n                        </div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'EMPRESAS CONTACTOS' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">\\r\\n                            <ng-container *ngIf=\\\"company?.comp_contacts?.length\\\">\\r\\n                                <ng-container *ngFor=\\\"let compContact of company?.comp_contacts; let last = last\\\">\\r\\n                                    <a routerLink=\\\"/comp-contacts/{{ compContact?.id }}/edit\\\">{{ compContact?.name }}</a><span *ngIf=\\\"!last\\\">, </span>\\r\\n                                </ng-container>\\r\\n                            </ng-container>\\r\\n                        </div>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"item-transparent\\\">\\r\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'EMPRESAS RESPONSABILIDADES LEGALES' | titlecase }}</b></ion-label>\\r\\n                        <div class=\\\"wrap-text\\\">\\r\\n                            <ng-container *ngIf=\\\"company?.comp_responsabilities?.length\\\">\\r\\n                                <ng-container *ngFor=\\\"let compResponsability of company?.comp_responsabilities; let last = last\\\">\\r\\n                                    <a routerLink=\\\"/comp-responsabilities/{{ compResponsability?.id }}/edit\\\">{{ compResponsability?.name }}</a><span *ngIf=\\\"!last\\\">, </span>\\r\\n                                </ng-container>\\r\\n                            </ng-container>\\r\\n                        </div>\\r\\n                    </ion-item>\\r\\n            </ion-list>\\r\\n            <ion-footer>\\r\\n                <ion-row>\\r\\n                    <ion-col class=\\\"ion-text-center\\\">\\r\\n                        <ion-button color=\\\"success\\\" size=\\\"small\\\" fill=\\\"clear\\\" [routerLink]=\\\"'/companies/' + company?.id + '/edit'\\\">\\r\\n                            <ion-icon name=\\\"create-outline\\\"></ion-icon>\\r\\n                            <div>Editar</div>\\r\\n                        </ion-button>\\r\\n                    </ion-col>\\r\\n                    <ion-col class=\\\"ion-text-center\\\">\\r\\n                        <ion-button color=\\\"danger\\\" size=\\\"small\\\" fill=\\\"clear\\\" (click)=\\\"companiesService.deleteCompany(company?.id)\\\">\\r\\n                            <ion-icon name=\\\"trash-outline\\\"></ion-icon>\\r\\n                            <div>Eliminar</div>\\r\\n                        </ion-button>\\r\\n                    </ion-col>\\r\\n                </ion-row>\\r\\n            </ion-footer>\\r\\n        </ion-card>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container *ngIf=\\\"!(loading.loading | async) && !companiesService.companies?.length\\\">\\r\\n        <ion-item>\\r\\n            <ion-icon class=\\\"text-warning\\\" name=\\\"warning-outline\\\" slot=\\\"start\\\"></ion-icon>\\r\\n            <ion-label><h2>No se encontraron {{'EMPRESAS' | titlecase}}</h2></ion-label>\\r\\n            <ion-button [routerLink]=\\\"'/companies/create'\\\" fill=\\\"outline\\\" color=\\\"success\\\" slot=\\\"end\\\">\\r\\n                Crear {{'EMPRESAS' | titlecase}}\\r\\n                <ion-icon name=\\\"add-circle-outline\\\" slot=\\\"end\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-item>\\r\\n    </ng-container>\\r\\n\\r\\n</ion-content>\\r\\n\\r\\n<ion-footer class=\\\"lists-footer\\\">\\r\\n    <ion-row *ngIf=\\\"companiesService.meta\\\">\\r\\n        <ion-col class=\\\"ion-text-center\\\" size=\\\"12\\\">\\r\\n            <ion-button (click)=\\\"companiesService.getCompanies(companiesService.meta.current_page - 1)\\\"\\r\\n                        [disabled]=\\\"companiesService.meta.current_page == 1\\\"\\r\\n                        fill=\\\"clear\\\">\\r\\n                <ion-icon slot=\\\"end\\\" name=\\\"play-outline\\\" style=\\\"transform: rotate(180deg);\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n            <ion-button fill=\\\"clear\\\" [disabled]=\\\"true\\\"> Pag: {{companiesService.meta.current_page}}\\r\\n                /{{companiesService.meta.last_page}} {{companiesService.meta.from}}-{{companiesService.meta.to}}\\r\\n                /{{companiesService.meta.total}} </ion-button>\\r\\n            <ion-button (click)=\\\"companiesService.getCompanies(companiesService.meta.current_page + 1)\\\"\\r\\n                        [disabled]=\\\"companiesService.meta.current_page == companiesService.meta.last_page\\\"\\r\\n                        fill=\\\"clear\\\">\\r\\n                <ion-icon slot=\\\"start\\\" name=\\\"play-outline\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-col>\\r\\n    </ion-row>\\r\\n</ion-footer>\\r\\n\";","export default \"<app-main-header title=\\\"EMPRESAS\\\"></app-main-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n        <ion-row>\\r\\n\\r\\n            <ion-col size-md=\\\"3\\\" size-sm=\\\"6\\\" size-xs=\\\"12\\\">\\r\\n                <ion-card routerLink=\\\"/companies/list\\\">\\r\\n                    <div style=\\\"height: 120px; width: 100%; display: flex; align-items: center; justify-content: center;\\\">\\r\\n                        <ion-icon name=\\\"list-circle-outline\\\" color=\\\"primary\\\" class=\\\"icon-m\\\"></ion-icon>\\r\\n                    </div>\\r\\n                    <ion-card-header>\\r\\n                        <ion-card-subtitle class=\\\"ion-text-center\\\">\\r\\n                            Listar {{ 'EMPRESAS'  | titlecase }}\\r\\n                        </ion-card-subtitle>\\r\\n                    </ion-card-header>\\r\\n\\r\\n                </ion-card>\\r\\n            </ion-col>\\r\\n\\r\\n            <ion-col size-md=\\\"3\\\" size-sm=\\\"6\\\" size-xs=\\\"12\\\">\\r\\n                <ion-card routerLink=\\\"/companies/create\\\">\\r\\n                    <div style=\\\"height: 120px; width: 100%; display: flex; align-items: center; justify-content: center;\\\">\\r\\n                        <ion-icon name=\\\"add-circle-outline\\\" color=\\\"success\\\" class=\\\"icon-m\\\"></ion-icon>\\r\\n                    </div>\\r\\n                    <ion-card-header>\\r\\n                        <ion-card-subtitle class=\\\"ion-text-center\\\">\\r\\n                            Crear {{ 'EMPRESAS' | titlecase }}\\r\\n                        </ion-card-subtitle>\\r\\n                    </ion-card-header>\\r\\n\\r\\n                </ion-card>\\r\\n            </ion-col>\\r\\n\\r\\n        </ion-row>\\r\\n\\r\\n</ion-content>\\r\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBhbmllcy9jb21wYW5pZXMtY3JlYXRlL2NvbXBhbmllcy1jcmVhdGUuY29tcG9uZW50LnNjc3MifQ== */\";","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\r\nimport {CompaniesService} from \"../companies.service\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {Company} from \"../company\";\r\nimport {CompaniesFormComponent} from \"../companies-form/companies-form.component\";\r\nimport { Platform } from '@ionic/angular';\r\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\r\n\r\n@Component({\r\n    selector: 'app-companies-create',\r\n    templateUrl: './companies-create.component.html',\r\n    styleUrls: ['./companies-create.component.scss']\r\n})\r\nexport class CompaniesCreateComponent implements OnInit, AfterViewInit {\r\n\r\n    @ViewChild('companyForm') companyForm: CompaniesFormComponent;\r\n\r\n    id: any = null;\r\n    public formValid = false;\r\n\r\n    constructor(\r\n        public companiesService: CompaniesService,\r\n        public route: ActivatedRoute,\r\n        public platform: Platform,\r\n        public splitPanel: SplitPanelService\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.clearPosts();\r\n    }\r\n\r\n    ionViewWillEnter() {\r\n       this.splitPanel.show.next(true);\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.companyForm.companiesForm.valueChanges.subscribe((data) => {\r\n            this.companiesService.companiesFormValid.next(this.companyForm.companiesForm.valid);\r\n        });\r\n    }\r\n\r\n    clearPosts() {\r\n        console.log('clear');\r\n        this.companiesService.createCompany();\r\n        this.companiesService.company = <Company>{};\r\n    }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBhbmllcy9jb21wYW5pZXMtZHVwbGljYXRlL2NvbXBhbmllcy1kdXBsaWNhdGUuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-companies-duplicate',\r\n  templateUrl: './companies-duplicate.component.html',\r\n  styleUrls: ['./companies-duplicate.component.scss'],\r\n})\r\nexport class CompaniesDuplicateComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBhbmllcy9jb21wYW5pZXMtZWRpdC9jb21wYW5pZXMtZWRpdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild, AfterViewInit} from '@angular/core';\r\nimport {CompaniesService} from \"../companies.service\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {Company} from \"../company\";\r\nimport {CompaniesFormComponent} from \"../companies-form/companies-form.component\";\r\nimport { Platform } from '@ionic/angular';\r\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\r\n\r\n@Component({\r\n  selector: 'app-companies-edit',\r\n  templateUrl: './companies-edit.component.html',\r\n  styleUrls: ['./companies-edit.component.scss']\r\n})\r\nexport class CompaniesEditComponent implements OnInit, AfterViewInit {\r\n\r\n    @ViewChild('companyForm') companyForm: CompaniesFormComponent;\r\n\r\n    public id: any = null;\r\n    public model: Company = null;\r\n\r\n  constructor(\r\n      public companiesService: CompaniesService,\r\n      public route: ActivatedRoute,\r\n      public platform: Platform,\r\n      public splitPanel: SplitPanelService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n      this.id = this.route.snapshot.paramMap.get('id');\r\n      this.companiesService.editCompany(this.id);\r\n  }\r\n\r\n  ionViewWillEnter() {\r\n    this.splitPanel.show.next(true);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n      this.companyForm.companiesForm.valueChanges.subscribe((data) => {\r\n          this.companiesService.companiesFormValid.next(this.companyForm.companiesForm.valid);\r\n      });\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBhbmllcy9jb21wYW5pZXMtZm9ybS9jb21wYW5pZXMtZm9ybS5jb21wb25lbnQuc2NzcyJ9 */\";","import {AfterViewInit, Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {Company} from \"../company\";\r\nimport {FormGroup} from \"@angular/forms\";\r\nimport {CompaniesService} from \"../companies.service\";\r\nimport {TitleCasePipe} from \"@angular/common\";\r\n\r\n@Component({\r\n    selector: 'app-companies-form',\r\n    templateUrl: './companies-form.component.html',\r\n    styleUrls: ['./companies-form.component.scss']\r\n})\r\nexport class CompaniesFormComponent implements OnInit, AfterViewInit {\r\n\r\n    @Input('model') model: Company = <Company>{};\r\n\r\n    @ViewChild('companiesForm') companiesForm: FormGroup;\r\n\r\n    public validationMessages = {\r\n        'name': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('NOMBRE') + ' es obligatorio.'},\r\n        ],\r\n        'code': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('CÓDIGO') + ' es obligatorio.'},\r\n        ],\r\n        'nit': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('NIT') + ' es obligatorio.'},\r\n        ],\r\n        'manager_name': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('NOMBRE REPRESENTANTE LEGAL') + ' es obligatorio.'},\r\n        ],\r\n        'manager_document': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('CÉDULA REPRESENTANTE LEGAL') + ' es obligatorio.'},\r\n        ],\r\n        'logo': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('LOGOTIPO') + ' es obligatorio.'},\r\n        ],\r\n        'main': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('PRINCIPAL') + ' es obligatorio.'},\r\n        ],\r\n        'comp_phone_ids': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('TELÉFONOS DE EMPRESAS') + ' es obligatorio.'},\r\n        ],\r\n        'comp_address_ids': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('EMPRESAS DIRECCIONES') + ' es obligatorio.'},\r\n        ],\r\n        'comp_contact_ids': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('EMPRESAS CONTACTOS') + ' es obligatorio.'},\r\n        ],\r\n        'comp_responsability_ids': [\r\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('EMPRESAS RESPONSABILIDADES LEGALES') + ' es obligatorio.'},\r\n        ],\r\n    };\r\n\r\n    constructor(\r\n        public companiesService: CompaniesService,\r\n        private toTitlecase: TitleCasePipe\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n    }\r\n\r\n\r\n    // set setCompPhoneIds\r\n    setCompPhoneIds(event: any) {\r\n        let compPhoneIds = null;\r\n        if (event.value.length) {\r\n            compPhoneIds = [];\r\n            for (let i = 0; i < event.value.length; i++) {\r\n                compPhoneIds.push(event.value[i].id);\r\n            }\r\n        }\r\n        this.companiesService.company.comp_phone_ids = compPhoneIds;\r\n    }\r\n    // end setCompPhoneIds\r\n\r\n\r\n    // set setCompAddressIds\r\n    setCompAddressIds(event: any) {\r\n        let compAddressIds = null;\r\n        if (event.value.length) {\r\n            compAddressIds = [];\r\n            for (let i = 0; i < event.value.length; i++) {\r\n                compAddressIds.push(event.value[i].id);\r\n            }\r\n        }\r\n        this.companiesService.company.comp_address_ids = compAddressIds;\r\n    }\r\n    // end setCompAddressIds\r\n\r\n\r\n    // set setCompContactIds\r\n    setCompContactIds(event: any) {\r\n        let compContactIds = null;\r\n        if (event.value.length) {\r\n            compContactIds = [];\r\n            for (let i = 0; i < event.value.length; i++) {\r\n                compContactIds.push(event.value[i].id);\r\n            }\r\n        }\r\n        this.companiesService.company.comp_contact_ids = compContactIds;\r\n    }\r\n    // end setCompContactIds\r\n\r\n\r\n    // set setCompResponsabilityIds\r\n    setCompResponsabilityIds(event: any) {\r\n        let compResponsabilityIds = null;\r\n        if (event.value.length) {\r\n            compResponsabilityIds = [];\r\n            for (let i = 0; i < event.value.length; i++) {\r\n                compResponsabilityIds.push(event.value[i].id);\r\n            }\r\n        }\r\n        this.companiesService.company.comp_responsability_ids = compResponsabilityIds;\r\n    }\r\n    // end setCompResponsabilityIds\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBhbmllcy9jb21wYW5pZXMtbGlzdC9jb21wYW5pZXMtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport { CompaniesService} from \"../companies.service\";\r\nimport {ApiService} from \"../../@shared/services/api.service\";\r\nimport {LoadingService} from \"../../@shared/services/loading.service\";\r\nimport {IonContent} from '@ionic/angular';\r\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\r\n\r\n@Component({\r\n    selector: 'app-companies-list',\r\n    templateUrl: './companies-list.component.html',\r\n    styleUrls: ['./companies-list.component.scss'],\r\n})\r\nexport class CompaniesListComponent implements OnInit {\r\n\r\n    @ViewChild(IonContent, {static: false}) content: IonContent;\r\n\r\n    popover: any;\r\n\r\n    constructor(\r\n        public companiesService: CompaniesService,\r\n        public api: ApiService,\r\n        public loading: LoadingService,\r\n        public splitPanel: SplitPanelService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.companiesService.getCompanies();\r\n    }\r\n\r\n    ionViewWillEnter() {\r\n     this.splitPanel.show.next(true);\r\n    }\r\n\r\n    public scrollToTop() {\r\n        this.content.scrollToTop(300);\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CompaniesPage } from './companies.page';\r\nimport {CompaniesEditComponent} from \"./companies-edit/companies-edit.component\";\r\nimport {CompaniesCreateComponent} from \"./companies-create/companies-create.component\";\r\nimport {CompaniesListComponent} from \"./companies-list/companies-list.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CompaniesPage\r\n    },\r\n    {\r\n        path: 'list',\r\n        component: CompaniesListComponent\r\n    },\r\n    {\r\n      path: 'create',\r\n      component: CompaniesCreateComponent\r\n    },\r\n    {\r\n        path: ':id/edit',\r\n        component: CompaniesEditComponent\r\n    },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n})\r\nexport class CompaniesPageRoutingModule {}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule} from '@angular/forms';\r\n\r\nimport {IonicModule} from '@ionic/angular';\r\n\r\nimport {SharedModule} from '../@shared/shared.module';\r\n\r\nimport {CompaniesPageRoutingModule} from './companies-routing.module';\r\n\r\nimport { CompaniesPage} from './companies.page';\r\nimport { CompaniesListComponent} from \"./companies-list/companies-list.component\";\r\nimport { CompaniesCreateComponent} from \"./companies-create/companies-create.component\";\r\nimport { CompaniesDuplicateComponent} from \"./companies-duplicate/companies-duplicate.component\";\r\nimport { CompaniesEditComponent} from \"./companies-edit/companies-edit.component\";\r\nimport { CompaniesFormComponent} from \"./companies-form/companies-form.component\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        IonicModule,\r\n        SharedModule,\r\n        CompaniesPageRoutingModule\r\n    ],\r\n    declarations: [\r\n        CompaniesPage,\r\n        CompaniesListComponent,\r\n        CompaniesCreateComponent,\r\n        CompaniesDuplicateComponent,\r\n        CompaniesEditComponent,\r\n        CompaniesFormComponent,\r\n    ]\r\n})\r\nexport class CompaniesPageModule {\r\n}\r\n\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBhbmllcy9jb21wYW5pZXMucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport {SplitPanelService} from \"../@shared/services/split-panel.service\";\r\n\r\n@Component({\r\n  selector: 'app-companies',\r\n  templateUrl: './companies.page.html',\r\n  styleUrls: ['./companies.page.scss'],\r\n})\r\nexport class CompaniesPage implements OnInit {\r\n\r\n  constructor(\r\n    public splitPanel: SplitPanelService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ionViewWillEnter() {\r\n    this.splitPanel.show.next(true);\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Router} from \"@angular/router\";\r\nimport {ApiService} from \"../@shared/services/api.service\";\r\nimport { Company, CompanyLists } from \"./company\";\r\nimport {Meta} from \"../@shared/interfaces/meta\";\r\nimport {AlertService} from \"../@shared/services/alert.service\";\r\nimport {ToastService} from \"../@shared/services/toast.service\";\r\nimport {NavigationService} from '../@shared/services/navigation.service'\r\nimport {BehaviorSubject} from \"rxjs\";\r\n\r\ndeclare var $: any;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CompaniesService {\r\n\r\n    public companiesUrl = 'companies';\r\n    public companiesFormValid = new BehaviorSubject<boolean>(false);\r\n\r\n    public companies: Company[] = [];\r\n    public company: Company = <Company>{};\r\n    public companyLists: CompanyLists = {};\r\n\r\n    public searchValue = '';\r\n    public perPage = 10;\r\n\r\n    public meta: Meta = null;\r\n\r\n    public page = 1;\r\n\r\n    public pagesContent = document.getElementById('pages-content');\r\n\r\n    constructor(\r\n        public api: ApiService,\r\n        public alert: AlertService,\r\n        public toast: ToastService,\r\n        public router: Router,\r\n        private navigation: NavigationService,\r\n    ) {\r\n    }\r\n\r\n    public getCompanies(page: any = this.page, perPage: any = this.perPage) {\r\n\r\n        this.api.get(this.companiesUrl + '?page=' + page + '&perPage=' + perPage + '&q[name:cont]=' + this.searchValue)\r\n            .subscribe(\r\n                (res: any) => {\r\n                    // @ts-ignore\r\n                    document.getElementById('pages-content').scrollToTop(300);\r\n                    this.companies = res.data;\r\n                    this.companyLists = res.lists;\r\n                    this.meta = res.meta;\r\n                },\r\n                (err: any) => {\r\n                    console.error(err);\r\n                }\r\n            );\r\n    }\r\n\r\n    public editCompany(id: any) {\r\n        this.api.get(this.companiesUrl + '/' + id + '/edit')\r\n            .subscribe(\r\n                (res: any) => {\r\n                    this.company = res.data.model;\r\n                    this.companyLists = res.lists;\r\n                },\r\n                (err: any) => {\r\n                    console.error(err);\r\n                }\r\n            );\r\n    }\r\n\r\n    public updateCompany() {\r\n        this.api.put(this.companiesUrl + '/' + this.company.id, {\r\n            model: this.company,\r\n            pivots: {\r\n            }\r\n        }).subscribe(\r\n            (res: any) => {\r\n                this.toast.present(res.message, 'toast-success', 'top');\r\n                this.navigation.back();\r\n                this.getCompanies(1);\r\n            }\r\n        );\r\n    }\r\n\r\n    public createCompany() {\r\n        this.api.get(this.companiesUrl + '/create')\r\n            .subscribe(\r\n                (res: any) => {\r\n                    this.company = <Company>{};\r\n                    this.companyLists = res.lists\r\n                }\r\n            );\r\n    }\r\n\r\n    public storeCompany() {\r\n        this.api.post(this.companiesUrl, {\r\n            model: this.company,\r\n            pivots: {\r\n            }\r\n        }).subscribe(\r\n            (res: any) => {\r\n                this.toast.present(res.message, 'toast-success', 'top');\r\n                this.navigation.back();\r\n                this.getCompanies(1);\r\n            }\r\n        );\r\n    }\r\n\r\n    public async deleteCompany(id: any) {\r\n        const confirm = await this.alert.confirmation(\r\n            'Desea eliminar el item?'\r\n        );\r\n        if (confirm) {\r\n            this.api.delete(this.companiesUrl + '/' + id, {})\r\n                .subscribe(\r\n                    (res: any) => {\r\n                        this.toast.present(res.message, 'toast-success', 'top');\r\n                        this.getCompanies(1);\r\n                    }\r\n                );\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n}\r\n"]}