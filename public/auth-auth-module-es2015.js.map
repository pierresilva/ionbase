{"version":3,"sources":["./src/app/auth/auth.page.html","./src/app/auth/login/login.component.html","./src/app/auth/logout/logout.component.html","./src/app/auth/password-forgot/password-forgot.component.html","./src/app/auth/password-reset/password-reset.component.html","./src/app/auth/register-confirm/register-confirm.component.html","./src/app/auth/register/register.component.html","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/auth.page.scss","./src/app/auth/auth.page.ts","./src/app/auth/login/login.component.scss","./src/app/auth/login/login.component.ts","./src/app/auth/logout/logout.component.scss","./src/app/auth/logout/logout.component.ts","./src/app/auth/password-forgot/password-forgot.component.scss","./src/app/auth/password-forgot/password-forgot.component.ts","./src/app/auth/password-reset/password-reset.component.scss","./src/app/auth/password-reset/password-reset.component.ts","./src/app/auth/register-confirm/register-confirm.component.scss","./src/app/auth/register-confirm/register-confirm.component.ts","./src/app/auth/register/register.component.scss","./src/app/auth/register/register.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["export default \"<ion-content fullscreen>\\r\\n    <ion-grid>\\r\\n        <ion-row>\\r\\n            <ion-col class=\\\"ion-align-self-center\\\">\\r\\n                <ion-button [routerLink]=\\\"['/registration']\\\" expand=\\\"block\\\" color=\\\"primary\\\">Register</ion-button>\\r\\n\\r\\n                <span class=\\\"divider line one-line\\\">or</span>\\r\\n\\r\\n                <span class=\\\"already\\\">Already a user?</span>\\r\\n\\r\\n                <ion-button [routerLink]=\\\"['/login']\\\" expand=\\\"block\\\" color=\\\"danger\\\">Sign In</ion-button>\\r\\n            </ion-col>\\r\\n        </ion-row>\\r\\n    </ion-grid>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-content no-bounce>\\r\\n    <div class=\\\"login-background\\\"></div>\\r\\n    <ion-grid class=\\\"ion-no-padding\\\">\\r\\n        <ion-row class=\\\"ion-justify-content-center ion-no-padding\\\">\\r\\n            <ion-col size-sm=\\\"8\\\"\\r\\n                     size-lg=\\\"6\\\"\\r\\n                     size-xl=\\\"4\\\"\\r\\n                     class=\\\"ion-align-self-center ion-no-padding\\\">\\r\\n                <div class=\\\"login-header ion-text-center\\\">\\r\\n                    <h1 [hidden]=\\\"true\\\">{{environment.name}}</h1>\\r\\n\\r\\n                    <img [routerLink]=\\\"'/'\\\" src=\\\"assets/images/NoahApp/logo-light-square.png\\\"\\r\\n                         style=\\\"max-height: 120px;\\\">\\r\\n\\r\\n                    <h6 style=\\\"margin-bottom: 0px;\\\">v-{{ version }}</h6>\\r\\n                </div>\\r\\n                <div class=\\\"login-container\\\">\\r\\n                    <form #loginForm=\\\"ngForm\\\"\\r\\n                          (ngSubmit)=\\\"login()\\\"\\r\\n                          novalidate\\r\\n                          autocomplete=\\\"off\\\">\\r\\n                        <ion-list>\\r\\n                            <ion-list-header>Ingresar</ion-list-header>\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Correo electrónico\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"text\\\"\\r\\n                                           name=\\\"email\\\"\\r\\n                                           id=\\\"email-field\\\"\\r\\n                                           email\\r\\n                                           required\\r\\n                                           [(ngModel)]=\\\"model.email\\\"\\r\\n                                           autocomplete=\\\"email\\\"></ion-input>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(loginForm?.form?.controls?.email?.untouched || loginForm?.form?.controls?.email?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Correo electónico no valido</span>\\r\\n                            </ion-text>\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Contraseña\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"password\\\"\\r\\n                                           name=\\\"password\\\"\\r\\n                                           id=\\\"password-field\\\"\\r\\n                                           required\\r\\n                                           minlength=\\\"6\\\"\\r\\n                                           maxlength=\\\"16\\\"\\r\\n                                           [(ngModel)]=\\\"model.password\\\"\\r\\n                                           autocomplete=\\\"password\\\"></ion-input>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(loginForm?.form?.controls?.password?.untouched || loginForm?.form?.controls?.password?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Contraseña no valida</span>\\r\\n                            </ion-text>\\r\\n                            <!--<ion-item class=\\\"ion-padding-top\\\"\\r\\n                                      lines=\\\"none\\\">\\r\\n                                <ion-label>Recordarme</ion-label>\\r\\n                                <ion-checkbox slot=\\\"start\\\"\\r\\n                                              id=\\\"remember-field\\\"\\r\\n                                              name=\\\"remember\\\"\\r\\n                                              [(ngModel)]=\\\"model.remember\\\"></ion-checkbox>\\r\\n                            </ion-item>-->\\r\\n                            <div style=\\\"height: 1rem;\\\"></div>\\r\\n                        </ion-list>\\r\\n                        <div class=\\\"ion-padding-horizontal\\\">\\r\\n                            <ion-button\\r\\n                                    type=\\\"submit\\\"\\r\\n                                    [disabled]=\\\"loginForm?.form?.invalid || isLoading\\\"\\r\\n                                    color=\\\"primary\\\"\\r\\n                                    expand=\\\"block\\\">\\r\\n                                Ingresar\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n                        <div class=\\\"ion-padding-vertical ion-text-center\\\">\\r\\n                            <ion-button type=\\\"button\\\"\\r\\n                                        routerLink=\\\"/auth/register\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        fill=\\\"clean\\\">\\r\\n                                Registrarse\\r\\n                            </ion-button>\\r\\n                            <ion-button type=\\\"button\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        routerLink=\\\"/auth/password-forgot\\\"\\r\\n                                        fill=\\\"clean\\\">\\r\\n                                Olvidaste tu contraseña?\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n            </ion-col>\\r\\n        </ion-row>\\r\\n    </ion-grid>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-content>\\r\\n\\r\\n    <ion-grid>\\r\\n        <ion-row>\\r\\n            <ion-col>\\r\\n                Saliendo del sistema...\\r\\n            </ion-col>\\r\\n        </ion-row>\\r\\n    </ion-grid>\\r\\n\\r\\n</ion-content>\\r\\n\";","export default \"<ion-content no-bounce>\\r\\n    <div class=\\\"login-background\\\"></div>\\r\\n    <ion-grid class=\\\"ion-no-padding\\\">\\r\\n        <ion-row class=\\\"ion-justify-content-center ion-no-padding\\\">\\r\\n            <ion-col size-sm=\\\"8\\\"\\r\\n                     size-lg=\\\"6\\\"\\r\\n                     size-xl=\\\"4\\\"\\r\\n                     class=\\\"ion-align-self-center ion-no-padding\\\">\\r\\n                <div class=\\\"login-header ion-text-center\\\">\\r\\n                    <h1 [hidden]=\\\"true\\\">{{environment.name}}</h1>\\r\\n                    <a [routerLink]=\\\"'/landing'\\\">\\r\\n                        <img src=\\\"assets/images/NoahApp/logo-light-square.png\\\"\\r\\n                             style=\\\"max-height: 120px;\\\">\\r\\n                    </a>\\r\\n\\r\\n                    <h6 style=\\\"margin-bottom: 0px;\\\">v-{{ version }}</h6>\\r\\n                </div>\\r\\n                <div class=\\\"login-container\\\"\\r\\n                     *ngIf=\\\"resetOk\\\">\\r\\n                    <ion-row class=\\\"ion-padding-horizontal\\\">\\r\\n                        <ion-col class=\\\"ion-text-center\\\">\\r\\n                            <ion-icon name=\\\"checkmark-circle-outline\\\"\\r\\n                                      color=\\\"success\\\"\\r\\n                                      class=\\\"icon-m ion-padding-vertical\\\"></ion-icon>\\r\\n                            <h2>Soliciaste restablecer tu contraseña!</h2>\\r\\n                            <p class=\\\"ion-text-justify\\\">Por favor, confirma en tu correo electrónico el enlace que te\\r\\n                                                        hemos enviado para restablecer tu contraseña.\\r\\n                            </p>\\r\\n                            <p class=\\\"ion-text-justify\\\">Si en cinco minútos no has recibido el email haz click en el\\r\\n                                                        siguiente enlace para volverlo a intentar.\\r\\n                            </p>\\r\\n                            <ion-button fill=\\\"clear\\\"\\r\\n                                        (click)=\\\"resetOk = false\\\">Volver a intentar\\r\\n                            </ion-button>\\r\\n                        </ion-col>\\r\\n                    </ion-row>\\r\\n                </div>\\r\\n                <div class=\\\"login-container\\\"\\r\\n                     *ngIf=\\\"!resetOk\\\">\\r\\n                    <form #forgotForm=\\\"ngForm\\\"\\r\\n                          (ngSubmit)=\\\"passwordRecoverRequest()\\\"\\r\\n                          novalidate\\r\\n                          autocomplete=\\\"off\\\">\\r\\n                        <ion-list>\\r\\n                            <ion-list-header>Olvidaste tu contraseña?</ion-list-header>\\r\\n                            <ion-item lines=\\\"none\\\">\\r\\n                                <div class=\\\"ion-padding-vertical ion-text-justify\\\">\\r\\n                                    Si olvidaste tu contraseña ingresa tu correo electrónico para que te enviemos un\\r\\n                                    enlace para poder restablecerla.\\r\\n                                </div>\\r\\n                            </ion-item>\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Correo electrónico\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"text\\\"\\r\\n                                           name=\\\"email\\\"\\r\\n                                           id=\\\"email-field\\\"\\r\\n                                           email\\r\\n                                           required\\r\\n                                           [(ngModel)]=\\\"model.email\\\"\\r\\n                                           autocomplete=\\\"email\\\"></ion-input>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(forgotForm?.form?.controls?.email?.untouched || forgotForm?.form?.controls?.email?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Correo electónico no valido</span>\\r\\n                            </ion-text>\\r\\n                        </ion-list>\\r\\n                        <div style=\\\"height: 1rem;\\\"></div>\\r\\n                        <div class=\\\"ion-padding-horizontal\\\">\\r\\n                            <ion-button type=\\\"submit\\\"\\r\\n                                        [disabled]=\\\"forgotForm?.form?.invalid || isLoading\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        expand=\\\"block\\\">\\r\\n                                Restablecer contraseña\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n                        <div class=\\\"ion-padding-vertical ion-text-center\\\">\\r\\n                            <ion-button type=\\\"button\\\"\\r\\n                                        routerLink=\\\"/auth/login\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        fill=\\\"clean\\\">\\r\\n                                Ingresar\\r\\n                            </ion-button>\\r\\n                            <ion-button type=\\\"button\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        routerLink=\\\"/auth/register\\\"\\r\\n                                        fill=\\\"clean\\\">\\r\\n                                Registrarse\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n            </ion-col>\\r\\n        </ion-row>\\r\\n    </ion-grid>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-content no-bounce>\\r\\n    <div class=\\\"login-background\\\"></div>\\r\\n    <ion-grid class=\\\"ion-no-padding\\\">\\r\\n        <ion-row class=\\\"ion-justify-content-center ion-no-padding\\\">\\r\\n            <ion-col size-sm=\\\"8\\\"\\r\\n                     size-lg=\\\"6\\\"\\r\\n                     size-xl=\\\"4\\\"\\r\\n                     class=\\\"ion-align-self-center ion-no-padding\\\">\\r\\n                <div class=\\\"login-header ion-text-center\\\">\\r\\n                    <h1 [hidden]=\\\"true\\\">{{environment.name}}</h1>\\r\\n                    <a [routerLink]=\\\"'/landing'\\\">\\r\\n                        <img src=\\\"assets/images/NoahApp/logo-light-square.png\\\"\\r\\n                             style=\\\"max-height: 120px;\\\">\\r\\n                    </a>\\r\\n\\r\\n                    <h6 style=\\\"margin-bottom: 0px;\\\">v-{{ version }}</h6>\\r\\n                </div>\\r\\n                <div class=\\\"login-container\\\"\\r\\n                     *ngIf=\\\"!resetOk\\\">\\r\\n                    <ion-row class=\\\"ion-padding-horizontal\\\">\\r\\n                        <ion-col class=\\\"ion-text-center\\\">\\r\\n                            <ion-icon name=\\\"close-circle-outline\\\"\\r\\n                                      color=\\\"danger\\\"\\r\\n                                      class=\\\"icon-m ion-padding-vertical\\\"></ion-icon>\\r\\n                            <h2>No encontramos solicitudes validas para restablecer tu contraseña!</h2>\\r\\n                            <p class=\\\"ion-text-justify\\\">Por favor, confirma en tu correo electrónico el enlace que te\\r\\n                                                        enviamos para restablecer tu contraseña.\\r\\n                            </p>\\r\\n                        </ion-col>\\r\\n                    </ion-row>\\r\\n                </div>\\r\\n                <div class=\\\"login-container\\\"\\r\\n                     *ngIf=\\\"resetOk\\\">\\r\\n                    <form #resetPasswordForm=\\\"ngForm\\\"\\r\\n                          (ngSubmit)=\\\"passwordReset()\\\"\\r\\n                          novalidate\\r\\n                          autocomplete=\\\"off\\\">\\r\\n                        <ion-list>\\r\\n                            <ion-list-header>Restablece tu contraseña</ion-list-header>\\r\\n                            <ion-item lines=\\\"none\\\">\\r\\n                                <div class=\\\"ion-padding-vertical ion-text-justify\\\">\\r\\n                                    Por favor ingresa tu nueva contraseña.\\r\\n                                </div>\\r\\n                            </ion-item>\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Contraseña\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"password\\\"\\r\\n                                           name=\\\"password\\\"\\r\\n                                           id=\\\"password-field\\\"\\r\\n                                           required\\r\\n                                           minlength=\\\"6\\\"\\r\\n                                           maxlength=\\\"16\\\"\\r\\n                                           [(ngModel)]=\\\"model.password\\\"\\r\\n                                           #password=\\\"ngModel\\\"\\r\\n                                           autocomplete=\\\"password\\\"></ion-input>\\r\\n                                <ion-icon slot=\\\"end\\\"\\r\\n                                          name=\\\"eye-outline\\\"\\r\\n                                          id=\\\"password-field-show\\\"\\r\\n                                          (click)=\\\"showPassword('password-field')\\\"></ion-icon>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(resetPasswordForm?.form?.controls?.password?.untouched || resetPasswordForm?.form?.controls?.password?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Contraseña no valida</span>\\r\\n                            </ion-text>\\r\\n\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Confirmar Contraseña\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"password\\\"\\r\\n                                           name=\\\"password_confirmation\\\"\\r\\n                                           id=\\\"password_confirmation-field\\\"\\r\\n                                           [equalTo]=\\\"password\\\"\\r\\n                                           required\\r\\n                                           minlength=\\\"6\\\"\\r\\n                                           maxlength=\\\"16\\\"\\r\\n                                           [(ngModel)]=\\\"model.password_confirmation\\\"\\r\\n                                           #password_confirmation=\\\"ngModel\\\"\\r\\n                                           autocomplete=\\\"password_confirmation\\\"></ion-input>\\r\\n                                <ion-icon slot=\\\"end\\\"\\r\\n                                          name=\\\"eye-outline\\\"\\r\\n                                          id=\\\"password_confirmation-field-show\\\"\\r\\n                                          (click)=\\\"showPassword('password_confirmation-field')\\\"></ion-icon>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(resetPasswordForm?.form?.controls?.password_confirmation?.untouched || resetPasswordForm?.form?.controls?.password_confirmation?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Confirmación no valida</span>\\r\\n                            </ion-text>\\r\\n                        </ion-list>\\r\\n                        <div style=\\\"height: 1rem;\\\"></div>\\r\\n                        <div class=\\\"ion-padding-horizontal\\\">\\r\\n                            <ion-button type=\\\"submit\\\"\\r\\n                                        [disabled]=\\\"resetPasswordForm?.form?.invalid || isLoading\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        expand=\\\"block\\\">\\r\\n                                Restablecer contraseña\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n                        <div class=\\\"ion-padding-vertical ion-text-center\\\">\\r\\n                            <ion-button type=\\\"button\\\"\\r\\n                                        routerLink=\\\"/auth/login\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        fill=\\\"clean\\\">\\r\\n                                Ingresar\\r\\n                            </ion-button>\\r\\n                            <ion-button type=\\\"button\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        routerLink=\\\"/auth/register\\\"\\r\\n                                        fill=\\\"clean\\\">\\r\\n                                Registrarse\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n            </ion-col>\\r\\n        </ion-row>\\r\\n    </ion-grid>\\r\\n</ion-content>\\r\\n\";","export default \"<p>\\r\\n  register-confirm works!\\r\\n</p>\\r\\n\";","export default \"<ion-content no-bounce>\\r\\n    <div class=\\\"login-background\\\"></div>\\r\\n    <ion-grid class=\\\"ion-no-padding\\\">\\r\\n        <ion-row class=\\\"ion-justify-content-center ion-no-padding\\\">\\r\\n            <ion-col size-sm=\\\"8\\\"\\r\\n                     size-lg=\\\"6\\\"\\r\\n                     size-xl=\\\"4\\\"\\r\\n                     class=\\\"ion-align-self-center ion-no-padding\\\">\\r\\n                <div class=\\\"login-header ion-text-center\\\">\\r\\n                    <h1 [hidden]=\\\"true\\\">{{environment.name}}</h1>\\r\\n\\r\\n                        <img [routerLink]=\\\"'/'\\\" src=\\\"assets/images/NoahApp/logo-light-square.png\\\"\\r\\n                             style=\\\"max-height: 120px;\\\">\\r\\n\\r\\n                    <h6 style=\\\"margin-bottom: 0px;\\\">v-{{ version }}</h6>\\r\\n                </div>\\r\\n                <div class=\\\"login-container\\\"\\r\\n                     *ngIf=\\\"registered\\\">\\r\\n                    <ion-row class=\\\"ion-padding-horizontal\\\">\\r\\n                        <ion-col class=\\\"ion-text-center\\\">\\r\\n                            <ion-icon name=\\\"checkmark-circle-outline\\\"\\r\\n                                      color=\\\"success\\\"\\r\\n                                      class=\\\"icon-m ion-padding-vertical\\\"></ion-icon>\\r\\n                            <h2>Te registraste con éxito!</h2>\\r\\n                            <p class=\\\"ion-text-justify\\\">Antes de poder continuar, por favor, confirma tu correo electrónico con el enlace que te hemos enviado.</p>\\r\\n                            <p class=\\\"ion-text-justify\\\">Si en cinco minútos no has recibido el email haz click en el siguiente enlace para que te enviemos otro.</p>\\r\\n                            <ion-button fill=\\\"clear\\\" (click)=\\\"resendVerificationEmail()\\\">Enviar email de verificación</ion-button>\\r\\n                        </ion-col>\\r\\n                    </ion-row>\\r\\n                </div>\\r\\n                <div class=\\\"login-container\\\"\\r\\n                     *ngIf=\\\"!registered\\\">\\r\\n                    <form #registerForm=\\\"ngForm\\\"\\r\\n                          (ngSubmit)=\\\"register()\\\"\\r\\n                          novalidate\\r\\n                          autocomplete=\\\"off\\\">\\r\\n                        <ion-list>\\r\\n                            <ion-list-header>Registrarse</ion-list-header>\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Correo electrónico\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"text\\\"\\r\\n                                           name=\\\"email\\\"\\r\\n                                           id=\\\"email-field\\\"\\r\\n                                           email\\r\\n                                           required\\r\\n                                           [(ngModel)]=\\\"model.email\\\"\\r\\n                                           autocomplete=\\\"email\\\"></ion-input>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(registerForm?.form?.controls?.email?.untouched || registerForm?.form?.controls?.email?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Correo electónico no valido</span>\\r\\n                            </ion-text>\\r\\n\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Nombre\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"text\\\"\\r\\n                                           name=\\\"first_name\\\"\\r\\n                                           id=\\\"first_name-field\\\"\\r\\n                                           minlength=\\\"5\\\"\\r\\n                                           required\\r\\n                                           [(ngModel)]=\\\"model.first_name\\\"\\r\\n                                           autocomplete=\\\"email\\\"></ion-input>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(registerForm?.form?.controls?.first_name?.untouched || registerForm?.form?.controls?.first_name?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Nombre no valido</span>\\r\\n                            </ion-text>\\r\\n\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Apellido\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"text\\\"\\r\\n                                           name=\\\"last_name\\\"\\r\\n                                           id=\\\"last_name-field\\\"\\r\\n                                           minlength=\\\"5\\\"\\r\\n                                           required\\r\\n                                           [(ngModel)]=\\\"model.last_name\\\"\\r\\n                                           autocomplete=\\\"email\\\"></ion-input>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(registerForm?.form?.controls?.last_name?.untouched || registerForm?.form?.controls?.last_name?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Apellido no valido</span>\\r\\n                            </ion-text>\\r\\n\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Contraseña\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"password\\\"\\r\\n                                           name=\\\"password\\\"\\r\\n                                           id=\\\"password-field\\\"\\r\\n                                           required\\r\\n                                           minlength=\\\"6\\\"\\r\\n                                           maxlength=\\\"16\\\"\\r\\n                                           [(ngModel)]=\\\"model.password\\\"\\r\\n                                           #password=\\\"ngModel\\\"\\r\\n                                           autocomplete=\\\"password\\\"></ion-input>\\r\\n                                <ion-icon slot=\\\"end\\\"\\r\\n                                          name=\\\"eye-outline\\\"\\r\\n                                          id=\\\"password-field-show\\\"\\r\\n                                          (click)=\\\"showPassword('password-field')\\\"></ion-icon>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(registerForm?.form?.controls?.password?.untouched || registerForm?.form?.controls?.password?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Contraseña no valida</span>\\r\\n                            </ion-text>\\r\\n\\r\\n                            <ion-item lines=\\\"inset\\\">\\r\\n                                <ion-label color=\\\"medium\\\"\\r\\n                                           position=\\\"floating\\\">\\r\\n                                    Confirmar Contraseña\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"password\\\"\\r\\n                                           name=\\\"password_confirmation\\\"\\r\\n                                           id=\\\"password_confirmation-field\\\"\\r\\n                                           [equalTo]=\\\"password\\\"\\r\\n                                           required\\r\\n                                           minlength=\\\"6\\\"\\r\\n                                           maxlength=\\\"16\\\"\\r\\n                                           [(ngModel)]=\\\"model.password_confirmation\\\"\\r\\n                                           #password_confirmation=\\\"ngModel\\\"\\r\\n                                           autocomplete=\\\"password_confirmation\\\"></ion-input>\\r\\n                                <ion-icon slot=\\\"end\\\"\\r\\n                                          name=\\\"eye-outline\\\"\\r\\n                                          id=\\\"password_confirmation-field-show\\\"\\r\\n                                          (click)=\\\"showPassword('password_confirmation-field')\\\"></ion-icon>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(registerForm?.form?.controls?.password_confirmation?.untouched || registerForm?.form?.controls?.password_confirmation?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Confirmación no valida</span>\\r\\n                            </ion-text>\\r\\n\\r\\n                            <ion-item class=\\\"ion-padding-top\\\"\\r\\n                                      lines=\\\"none\\\">\\r\\n                                <ion-label>Acepto los <a (click)=\\\"null\\\">terminos y condiciones</a></ion-label>\\r\\n                                <ion-checkbox slot=\\\"start\\\"\\r\\n                                              id=\\\"accept_terms_conditions-field\\\"\\r\\n                                              name=\\\"accept_terms_conditions\\\"\\r\\n                                              required\\r\\n                                              [equal]=\\\"true\\\"\\r\\n                                              #accept_terms_conditions=\\\"ngModel\\\"\\r\\n                                              [(ngModel)]=\\\"model.accept_terms_conditions\\\"></ion-checkbox>\\r\\n                            </ion-item>\\r\\n                            <ion-text color=\\\"danger\\\"\\r\\n                                      [hidden]=\\\"(registerForm?.form?.controls?.accept_terms_conditions?.untouched || registerForm?.form?.controls?.accept_terms_conditions?.valid)\\\">\\r\\n                                <span class=\\\"ion-padding\\\">Debe aceptar los terminos y condiciones</span>\\r\\n                            </ion-text>\\r\\n\\r\\n                            <div style=\\\"height: 1rem;\\\"></div>\\r\\n\\r\\n                        </ion-list>\\r\\n                        <div class=\\\"ion-padding-horizontal\\\">\\r\\n                            <ion-button type=\\\"submit\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        expand=\\\"block\\\">\\r\\n                                Registrarse\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n                        <div class=\\\"ion-padding-vertical ion-text-center\\\">\\r\\n                            <ion-button type=\\\"button\\\"\\r\\n                                        routerLink=\\\"/auth/login\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        fill=\\\"clean\\\">\\r\\n                                Ingresar\\r\\n                            </ion-button>\\r\\n                            <ion-button type=\\\"button\\\"\\r\\n                                        color=\\\"primary\\\"\\r\\n                                        routerLink=\\\"/auth/password-forgot\\\"\\r\\n                                        fill=\\\"clean\\\">\\r\\n                                Olvidaste tu contraseña?\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n            </ion-col>\\r\\n        </ion-row>\\r\\n    </ion-grid>\\r\\n</ion-content>\\r\\n\";","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\n\r\nimport {AuthPage} from './auth.page';\r\nimport {LoginComponent} from \"./login/login.component\";\r\nimport {RegisterComponent} from \"./register/register.component\";\r\nimport {RegisterConfirmComponent} from \"./register-confirm/register-confirm.component\";\r\nimport {PasswordForgotComponent} from \"./password-forgot/password-forgot.component\";\r\nimport {PasswordResetComponent} from \"./password-reset/password-reset.component\";\r\nimport {LogoutComponent} from \"./logout/logout.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AuthPage\r\n    },\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent\r\n    },\r\n    {\r\n        path: 'logout',\r\n        component: LogoutComponent\r\n    },\r\n    {\r\n        path: 'login/:token',\r\n        component: LoginComponent\r\n    },\r\n    {\r\n        path: 'register',\r\n        component: RegisterComponent\r\n    },\r\n    {\r\n        path: 'register-confirm/:token',\r\n        component: RegisterConfirmComponent\r\n    },\r\n    {\r\n        path: 'password-forgot',\r\n        component: PasswordForgotComponent\r\n    },\r\n    {\r\n        path: 'password-reset/:token',\r\n        component: PasswordResetComponent\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class AuthPageRoutingModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule} from '@angular/forms';\r\n\r\nimport {IonicModule} from '@ionic/angular';\r\n\r\nimport {AuthPageRoutingModule} from './auth-routing.module';\r\n\r\nimport {AuthPage} from './auth.page';\r\nimport {LoginComponent} from \"./login/login.component\";\r\nimport {PasswordResetComponent} from \"./password-reset/password-reset.component\";\r\nimport {PasswordForgotComponent} from \"./password-forgot/password-forgot.component\";\r\nimport {RegisterComponent} from \"./register/register.component\";\r\nimport {RegisterConfirmComponent} from \"./register-confirm/register-confirm.component\";\r\nimport {SharedModule} from \"../@shared/shared.module\";\r\nimport {SplitPanelService} from \"../@shared/services/split-panel.service\";\r\nimport {LogoutComponent} from \"./logout/logout.component\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        IonicModule,\r\n        SharedModule,\r\n        AuthPageRoutingModule\r\n    ],\r\n    declarations: [\r\n        AuthPage,\r\n        LoginComponent,\r\n        PasswordResetComponent,\r\n        PasswordForgotComponent,\r\n        RegisterComponent,\r\n        RegisterConfirmComponent,\r\n        LogoutComponent,\r\n    ]\r\n})\r\nexport class AuthPageModule {\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvYXV0aC5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.page.html',\r\n  styleUrls: ['./auth.page.scss'],\r\n})\r\nexport class AuthPage implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MifQ== */\";","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport {LoadingController, Platform} from \"@ionic/angular\";\r\nimport {environment} from \"../../../environments/environment\";\r\nimport {finalize, map} from \"rxjs/operators\";\r\nimport {forkJoin, from} from \"rxjs\";\r\nimport {ApiService} from \"../../@shared/services/api.service\";\r\nimport {ToastService} from \"../../@shared/services/toast.service\";\r\nimport {AlertService} from \"../../@shared/services/alert.service\";\r\nimport {AuthService} from \"../../@shared/services/auth.service\";\r\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\r\nimport {StorageLocalService} from \"../../@shared/services/storage-local.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n    version: string | null = environment.version;\r\n    error: string | undefined;\r\n    isLoading = false;\r\n    environment = environment;\r\n\r\n    token: any = null;\r\n\r\n    model: any = {\r\n        email: '',\r\n        password: '',\r\n        remember: false\r\n    };\r\n\r\n    @ViewChild('loginForm') loginForm: FormGroup;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private formBuilder: FormBuilder,\r\n        private platform: Platform,\r\n        private api: ApiService,\r\n        private toast: ToastService,\r\n        private alert: AlertService,\r\n        public auth: AuthService,\r\n        public splitPanel: SplitPanelService,\r\n        public storage: StorageLocalService\r\n    ) {\r\n        // this.createForm();\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    ionViewWillEnter() {\r\n        this.splitPanel.show.next(false);\r\n        if (this.route.snapshot.paramMap.get('token')) {\r\n            this.toast.present('Se verifico tu correo electrónico con éxito!', 'toast-info');\r\n        }\r\n\r\n    }\r\n\r\n    async login() {\r\n        this.api.syncPost(environment.serverUrl + '/api/auth/login', this.model)\r\n            .then(\r\n                (res: any) => {\r\n                    this.toast.present(res.message, 'toast-success');\r\n                    this.storage.set('token', res.data.access_token);\r\n                    this.api.syncGet(environment.serverUrl + '/api/auth/profile?token=' + res.data.access_token)\r\n                        .then(\r\n                            async (res: any) => {\r\n                                this.storage.set('user', res.data.user);\r\n                                this.storage.set('acl', res.data.acl);\r\n                                if (!this.auth.checkToken) {\r\n                                    this.auth.startCheckExpirationToken();\r\n                                }\r\n                                this.router.navigateByUrl('/');\r\n                            });\r\n                },\r\n                (err: any) => {\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    get isWeb(): boolean {\r\n        return !this.platform.is('cordova');\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9nb3V0L2xvZ291dC5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\r\nimport {AuthService} from \"../../@shared/services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'app-logout',\r\n  templateUrl: './logout.component.html',\r\n  styleUrls: ['./logout.component.scss'],\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n\r\n  constructor(\r\n      public auth: AuthService\r\n  ) { }\r\n\r\n  ngOnInit() {}\r\n\r\n  ionViewWillEnter() {\r\n    this.auth.logout();\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcGFzc3dvcmQtZm9yZ290L3Bhc3N3b3JkLWZvcmdvdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormGroup} from \"@angular/forms\";\r\nimport {environment} from \"../../../environments/environment\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {Platform} from \"@ionic/angular\";\r\nimport {ApiService} from \"../../@shared/services/api.service\";\r\nimport {ToastService} from \"../../@shared/services/toast.service\";\r\nimport {AlertService} from \"../../@shared/services/alert.service\";\r\nimport {AuthService} from \"../../@shared/services/auth.service\";\r\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\r\n\r\n@Component({\r\n    selector: 'app-password-forgot',\r\n    templateUrl: './password-forgot.component.html',\r\n    styleUrls: ['./password-forgot.component.scss'],\r\n})\r\nexport class PasswordForgotComponent implements OnInit {\r\n\r\n    @ViewChild('forgotForm') forgotForm: FormGroup;\r\n\r\n    version: string | null = environment.version;\r\n    error: string | undefined;\r\n    isLoading = false;\r\n    environment = environment;\r\n\r\n    model: any = {\r\n        email: '',\r\n    };\r\n\r\n    resetOk = false;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private formBuilder: FormBuilder,\r\n        private platform: Platform,\r\n        private api: ApiService,\r\n        private toast: ToastService,\r\n        private alert: AlertService,\r\n        public auth: AuthService,\r\n        public splitPanel: SplitPanelService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.splitPanel.show.next(false);\r\n    }\r\n\r\n    get isWeb(): boolean {\r\n        return !this.platform.is('cordova');\r\n    }\r\n\r\n    passwordRecoverRequest() {\r\n        this.api.post('auth/reset-password', {email: this.model.email})\r\n            .subscribe(\r\n                (res: any) => {\r\n                    this.toast.present(res.message, 'toast-success');\r\n                    this.resetOk = true;\r\n                },\r\n                (err: any) => {\r\n                    this.resetOk = false;\r\n                }\r\n            );\r\n    }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcGFzc3dvcmQtcmVzZXQvcGFzc3dvcmQtcmVzZXQuY29tcG9uZW50LnNjc3MifQ== */\";","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {FormBuilder, FormGroup} from \"@angular/forms\";\r\nimport {Platform} from \"@ionic/angular\";\r\nimport {ApiService} from \"../../@shared/services/api.service\";\r\nimport {ToastService} from \"../../@shared/services/toast.service\";\r\nimport {AlertService} from \"../../@shared/services/alert.service\";\r\nimport {AuthService} from \"../../@shared/services/auth.service\";\r\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\r\nimport {environment} from \"../../../environments/environment\";\r\n\r\n@Component({\r\n    selector: 'app-password-reset',\r\n    templateUrl: './password-reset.component.html',\r\n    styleUrls: ['./password-reset.component.scss'],\r\n})\r\nexport class PasswordResetComponent implements OnInit {\r\n\r\n\r\n    @ViewChild('resetPasswordForm') resetPasswordForm: FormGroup;\r\n\r\n    version: string | null = environment.version;\r\n    error: string | undefined;\r\n    isLoading = false;\r\n    environment = environment;\r\n\r\n    resetOk = false;\r\n    token: any = null;\r\n\r\n    model: any = {\r\n        password: '',\r\n        password_confirmation: '',\r\n        token: ''\r\n    };\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private formBuilder: FormBuilder,\r\n        private platform: Platform,\r\n        private api: ApiService,\r\n        private toast: ToastService,\r\n        private alert: AlertService,\r\n        public auth: AuthService,\r\n        public splitPanel: SplitPanelService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ionViewWillEnter() {\r\n        this.resetOk = false;\r\n        this.splitPanel.show.next(false);\r\n        this.token = this.route.snapshot.paramMap.get('token');\r\n        this.findResetPasswordRequest();\r\n    }\r\n\r\n    passwordReset() {\r\n      this.model.token = this.token;\r\n        this.api.put('auth/reset-password', this.model)\r\n            .subscribe(\r\n                (res: any) => {\r\n                    this.toast.present(res.message, 'toast-success');\r\n                    this.router.navigateByUrl('/auth/login');\r\n                },\r\n                (err: any) => {\r\n                    this.resetOk = false;\r\n                }\r\n            );\r\n    }\r\n\r\n    showPassword(input: any): any {\r\n        const passwordField = document.getElementById(input);\r\n        const passwordButton = document.getElementById(input + '-show');\r\n        passwordField.setAttribute('type', (passwordField.getAttribute('type') === 'password') ? 'text' : 'password');\r\n        passwordButton.setAttribute('name', (passwordButton.getAttribute('name') === 'eye-outline') ? 'eye-off-outline' : 'eye-outline');\r\n    }\r\n\r\n    findResetPasswordRequest() {\r\n        this.api.get('auth/reset-password/' + this.token)\r\n            .subscribe(\r\n                (res: any) => {\r\n                    this.toast.present(res.message, 'toast-info');\r\n                    this.resetOk = true;\r\n                },\r\n                (err: any) => {\r\n                    this.resetOk = false;\r\n                }\r\n            );\r\n    }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVnaXN0ZXItY29uZmlybS9yZWdpc3Rlci1jb25maXJtLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-register-confirm',\r\n  templateUrl: './register-confirm.component.html',\r\n  styleUrls: ['./register-confirm.component.scss'],\r\n})\r\nexport class RegisterConfirmComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LnNjc3MifQ== */\";","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormGroup} from \"@angular/forms\";\r\nimport {environment} from \"../../../environments/environment\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {Platform} from \"@ionic/angular\";\r\nimport {ApiService} from \"../../@shared/services/api.service\";\r\nimport {ToastService} from \"../../@shared/services/toast.service\";\r\nimport {AlertService} from \"../../@shared/services/alert.service\";\r\nimport {AuthService} from \"../../@shared/services/auth.service\";\r\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss'],\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  @ViewChild('registerForm') registerForm: FormGroup;\r\n\r\n  version: string | null = environment.version;\r\n  error: string | undefined;\r\n  isLoading = false;\r\n  environment = environment;\r\n\r\n  model: any = {\r\n    name: '',\r\n    first_name: '',\r\n    last_name: '',\r\n    email: '',\r\n    password: '',\r\n    password_confirmation: '',\r\n    accept_terms_conditions: false\r\n  };\r\n\r\n  registered = false;\r\n\r\n  constructor(\r\n      private router: Router,\r\n      private route: ActivatedRoute,\r\n      private formBuilder: FormBuilder,\r\n      private platform: Platform,\r\n      private api: ApiService,\r\n      private toast: ToastService,\r\n      private alert: AlertService,\r\n      public auth: AuthService,\r\n      public splitPanel: SplitPanelService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ionViewWillEnter() {\r\n    this.splitPanel.show.next(false);\r\n  }\r\n\r\n  get isWeb(): boolean {\r\n    return !this.platform.is('cordova');\r\n  }\r\n\r\n  async register() {\r\n\r\n    if (this.registerForm.invalid) {\r\n      this.markFormGroupTouched(this.registerForm);\r\n      return;\r\n    }\r\n\r\n    this.model.name = this.model.first_name + ' ' + this.model.last_name\r\n\r\n    this.api.post('auth/register', this.model)\r\n        .subscribe(\r\n            (res: any) => {\r\n              this.toast.present(res.message, 'toast-success');\r\n              this.registered = true;\r\n            },\r\n            (err: any) => {\r\n\r\n            }\r\n        );\r\n  }\r\n\r\n  showPassword(input: any): any {\r\n    const passwordField = document.getElementById(input);\r\n    const passwordButton  = document.getElementById(input + '-show');\r\n    passwordField.setAttribute('type', (passwordField.getAttribute('type') === 'password') ?  'text' : 'password');\r\n    passwordButton.setAttribute('name', (passwordButton.getAttribute('name') === 'eye-outline') ?  'eye-off-outline' : 'eye-outline');\r\n  }\r\n\r\n  /**\r\n   * Marks all controls in a form group as touched\r\n   * @param formGroup - The form group to touch\r\n   */\r\n  private markFormGroupTouched(formGroup: FormGroup) {\r\n    (<any>Object).values(formGroup.controls).forEach(control => {\r\n      control.markAsTouched();\r\n\r\n      if (control.controls) {\r\n        this.markFormGroupTouched(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  resendVerificationEmail() {\r\n    this.api.post('auth/email/resend', {\r\n      email: this.model.email\r\n    })\r\n        .subscribe(\r\n            (res: any) => {\r\n            this.toast.present(res.message, 'toast-success');\r\n            },\r\n            (err: any) => {\r\n\r\n            }\r\n        );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}