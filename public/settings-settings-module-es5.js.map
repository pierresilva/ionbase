{"version":3,"sources":["webpack:///src/app/settings/settings-create/settings-create.component.html","webpack:///src/app/settings/settings-duplicate/settings-duplicate.component.html","webpack:///src/app/settings/settings-edit/settings-edit.component.html","webpack:///src/app/settings/settings-form/settings-form.component.html","webpack:///src/app/settings/settings-list/settings-list.component.html","webpack:///src/app/settings/settings-modal/settings-modal.component.html","webpack:///src/app/settings/settings.page.html","webpack:///src/app/settings/settings-create/settings-create.component.scss","webpack:///src/app/settings/settings-create/settings-create.component.ts","webpack:///src/app/settings/settings-duplicate/settings-duplicate.component.scss","webpack:///src/app/settings/settings-duplicate/settings-duplicate.component.ts","webpack:///src/app/settings/settings-edit/settings-edit.component.scss","webpack:///src/app/settings/settings-edit/settings-edit.component.ts","webpack:///src/app/settings/settings-form/settings-form.component.scss","webpack:///src/app/settings/settings-form/settings-form.component.ts","webpack:///src/app/settings/settings-list/settings-list.component.scss","webpack:///src/app/settings/settings-list/settings-list.component.ts","webpack:///src/app/settings/settings-modal/settings-modal.component.scss","webpack:///src/app/settings/settings-modal/settings-modal.component.ts","webpack:///src/app/settings/settings-routing.module.ts","webpack:///src/app/settings/settings.module.ts","webpack:///src/app/settings/settings.page.scss","webpack:///src/app/settings/settings.page.ts","webpack:///src/app/settings/settings.service.ts"],"names":["SettingsCreateComponent","settingsService","route","platform","splitPanel","id","formValid","clearPosts","show","next","settingForm","settingsForm","valueChanges","subscribe","data","settingsFormValid","valid","console","log","createSetting","setting","selector","template","SettingsDuplicateComponent","SettingsEditComponent","model","snapshot","paramMap","get","editSetting","SettingsFormComponent","toTitlecase","validationMessages","type","message","transform","event","setting_group_id","value","SettingsListComponent","api","loading","getSettings","content","scrollToTop","SettingsModalComponent","modalController","navParams","action","onClosedData","dismiss","routes","path","component","SettingsPageRoutingModule","imports","forChild","exports","SettingsPageModule","declarations","SettingsPage","SettingsService","alert","toast","router","navigation","settingsUrl","settings","settingLists","searchValue","perPage","meta","page","pagesContent","document","getElementById","res","lists","err","error","put","pivots","present","back","post","confirmation","confirm","providedIn"],"mappings":"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","file":"settings-settings-module-es5.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n\\n        <ion-buttons slot=\\\"start\\\">\\n            <!-- <ion-button [routerLink]=\\\"'/settings'\\\">\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back-outline\\\"></ion-icon>\\n            </ion-button> -->\\n            <ion-back-button\\n              [text]=\\\"''\\\"\\n              [icon]=\\\"'arrow-back-outline'\\\">\\n            </ion-back-button>\\n        </ion-buttons>\\n\\n        <ion-buttons slot=\\\"primary\\\">\\n            <ion-button (click)=\\\"settingsService.storeSetting()\\\"\\n                        color=\\\"success\\\"\\n                        fill=\\\"clear\\\"\\n                        [disabled]=\\\"!settingsService.settingsFormValid.value\\\">\\n                        <ng-container *ngIf=\\\"!platform.is('mobile')\\\">Guardar</ng-container>\\n                <ion-icon slot=\\\"end\\\" color=\\\"success\\\" name=\\\"save-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n\\n        <ion-title>Crear {{'AJUSTES' | titlecase}}</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content fullscreen>\\n    <ion-card>\\n        <app-settings-form #settingForm [model]=\\\"settingsService.setting\\\"></app-settings-form>\\n    </ion-card>\\n\\n</ion-content>\\n\";","export default \"<p>\\n  Settings duplicate works!\\n</p>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n\\n        <ion-buttons slot=\\\"start\\\">\\n            <!-- <ion-button [routerLink]=\\\"'/settings'\\\">\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back-outline\\\"></ion-icon>\\n            </ion-button> -->\\n            <ion-back-button\\n              [text]=\\\"''\\\"\\n              [icon]=\\\"'arrow-back-outline'\\\">\\n            </ion-back-button>\\n        </ion-buttons>\\n\\n        <ion-buttons slot=\\\"primary\\\">\\n            <ion-button (click)=\\\"settingsService.updateSetting()\\\"\\n                        color=\\\"success\\\"\\n                        fill=\\\"clear\\\"\\n                        [disabled]=\\\"!settingsService.settingsFormValid.value\\\">\\n                        <ng-container *ngIf=\\\"!platform.is('mobile')\\\">Guardar</ng-container>\\n                <ion-icon slot=\\\"end\\\" color=\\\"success\\\" name=\\\"save-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n\\n        <ion-title>Editar {{'AJUSTES' | titlecase}}: {{ settingsService.setting?.name }}</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content fullscreen>\\n    <ion-card>\\n            <app-settings-form #settingForm [model]=\\\"settingsService.setting\\\"></app-settings-form>\\n    </ion-card>\\n\\n</ion-content>\\n\";","export default \"<form #settingsForm=\\\"ngForm\\\"\\n      novalidate\\n      autocomplete=\\\"off\\\">\\n\\n\\n    <!-- setting_group_id -->\\n    <ion-item class=\\\"item-transparent\\\">\\n        <ion-label>{{ 'GRUPO' | titlecase }}</ion-label>\\n        <ionic-selectable name=\\\"setting_group_id\\\"\\n                          id=\\\"setting_group_id-field\\\"\\n                          [required]=\\\"true\\\"\\n                          [(ngModel)]=\\\"model.setting_group\\\"\\n                          [items]=\\\"settingsService.settingLists.SettingGroup\\\"\\n                          itemValueField=\\\"id\\\"\\n                          itemTextField=\\\"name\\\"\\n                          [canClear]=\\\"true\\\"\\n                          [hasConfirmButton]=\\\"true\\\"\\n                          [confirmButtonText]=\\\"'Seleccionar'\\\"\\n                          [searchPlaceholder]=\\\"'Buscar ' + ('GRUPOS' | titlecase)\\\"\\n                          [searchFailText]=\\\"'No se encontro ' + ('GRUPOS' | titlecase) + ' que coincida!'\\\"\\n                          [closeButtonText]=\\\"'Cancelar'\\\"\\n                          [clearButtonText]=\\\"'Limpiar'\\\"\\n                          [canSearch]=\\\"true\\\"\\n                          (onChange)=\\\"setSettingGroupId($event)\\\">\\n        </ionic-selectable>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validationMessages.setting_group_id\\\">\\n            <div class=\\\"error-message\\\"\\n                 *ngIf=\\\"settingsForm.form.controls['setting_group_id']?.hasError(validation.type)\\\">\\n                {{ validation.message }}\\n            </div>\\n        </ng-container>\\n    </div>\\n    <!-- end setting_group_id -->\\n\\n\\n    <!-- name -->\\n    <ion-item class=\\\"item-transparent\\\">\\n        <ion-label>{{ 'NOMBRE' | titlecase }}</ion-label>\\n        <ion-input [(ngModel)]=\\\"model.name\\\"\\n                   type=\\\"text\\\"\\n                   name=\\\"name\\\"\\n                   id=\\\"name-field\\\"\\n                   [required]=\\\"true\\\"\\n                   placeholder=\\\"\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validationMessages.name\\\">\\n            <div class=\\\"error-message\\\"\\n                 *ngIf=\\\"settingsForm.form.controls['name']?.hasError(validation.type)\\\">\\n                {{ validation.message }}\\n            </div>\\n        </ng-container>\\n    </div>\\n    <!-- end name -->\\n\\n\\n    <!-- code -->\\n    <ion-item class=\\\"item-transparent\\\">\\n        <ion-label>{{ 'CÓDIGO' | titlecase }}</ion-label>\\n        <ion-input [(ngModel)]=\\\"model.code\\\"\\n                   type=\\\"text\\\"\\n                   name=\\\"code\\\"\\n                   id=\\\"code-field\\\"\\n                   [readonly]=\\\"true\\\"\\n                   placeholder=\\\"\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validationMessages.code\\\">\\n            <div class=\\\"error-message\\\"\\n                 *ngIf=\\\"settingsForm.form.controls['code']?.hasError(validation.type)\\\">\\n                {{ validation.message }}\\n            </div>\\n        </ng-container>\\n    </div>\\n    <!-- end code -->\\n\\n    <!-- rich_text -->\\n    <ion-item class=\\\"item-transparent\\\">\\n        <ion-label>{{ 'Texto enriquecido' | titlecase }}</ion-label>\\n        <ion-toggle name=\\\"main\\\"\\n                    id=\\\"main-field\\\"\\n                    slot=\\\"end\\\"\\n                    [(ngModel)]=\\\"model.rich_text\\\"></ion-toggle>\\n    </ion-item>\\n    <!-- end main -->\\n\\n\\n    <!-- value -->\\n    <ion-item class=\\\"item-transparent\\\" *ngIf=\\\"model.rich_text\\\">\\n        <ion-label position=\\\"stacked\\\"\\n                   style=\\\"font-size: 1rem;\\\">{{ 'VALOR' | titlecase }}</ion-label>\\n        <input [ngxSummernote]\\n               [required]=\\\"true\\\"\\n               name=\\\"value\\\"\\n               id=\\\"value-field\\\"\\n               [(ngModel)]=\\\"model.value\\\">\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validationMessages.value\\\">\\n            <div class=\\\"error-message\\\"\\n                 *ngIf=\\\"settingsForm.form.controls['value']?.hasError(validation.type)\\\">\\n                {{ validation.message }}\\n            </div>\\n        </ng-container>\\n    </div>\\n    <!-- end value -->\\n\\n    <!-- value -->\\n    <ion-item class=\\\"item-transparent\\\" *ngIf=\\\"!model.rich_text\\\">\\n        <ion-label position=\\\"stacked\\\"\\n                   style=\\\"font-size: 1rem;\\\">{{ 'VALOR' | titlecase }}</ion-label>\\n        <ion-textarea [(ngModel)]=\\\"model.value\\\"\\n                      name=\\\"value\\\"\\n                      [required]=\\\"true\\\"\\n                      id=\\\"value-field\\\"\\n                      rows=\\\"6\\\"\\n                      placeholder=\\\"\\\"></ion-textarea>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validationMessages.value\\\">\\n            <div class=\\\"error-message\\\"\\n                 *ngIf=\\\"settingsForm.form.controls['value']?.hasError(validation.type)\\\">\\n                {{ validation.message }}\\n            </div>\\n        </ng-container>\\n    </div>\\n    <!-- end value -->\\n\\n\\n</form>\\n\";","export default \"<app-main-header title=\\\"{{'AJUSTES' | titlecase}}\\\"\\n                 primaryLink=\\\"settings/create\\\"\\n                 primaryText=\\\"Crear {{'AJUSTES' | lowercase}}\\\"\\n                 primaryIcon=\\\"add-circle-outline\\\"></app-main-header>\\n\\n<ion-content id=\\\"pages-content\\\">\\n\\n    <ion-searchbar showCancelButton=\\\"focus\\\"\\n                       [cancelButtonText]=\\\"'Cancelar'\\\"\\n                       [placeholder]=\\\"'Buscar ' + ('AJUSTES' | lowercase )\\\"\\n                       (ionCancel)=\\\"this.settingsService.searchValue = ''; settingsService.getSettings()\\\"\\n                       (keyup.enter)=\\\"settingsService.getSettings()\\\"\\n                       [(ngModel)]=\\\"settingsService.searchValue\\\"></ion-searchbar>\\n\\n    <ng-container *ngIf=\\\"!(loading.loading | async) && settingsService.settings?.length\\\">\\n        <ion-card *ngFor=\\\"let setting of settingsService.settings; let index = index\\\">\\n            <ion-list>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'NOMBRE' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\">{{ setting?.name }}</div>\\n                    </ion-item>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'CÓDIGO' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\">{{ setting?.code }}</div>\\n                    </ion-item>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'VALOR' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\">{{ setting?.value | stripHtml }}</div>\\n                    </ion-item>\\n                    <ion-item class=\\\"item-transparent\\\">\\n                        <ion-label position=\\\"fixed\\\"><b>{{ 'AJUSTES GRUPOS' | titlecase }}</b></ion-label>\\n                        <div class=\\\"wrap-text\\\"><a routerLink=\\\"/setting-groups/{{ setting?.setting_group?.id }}/edit\\\">{{ setting?.setting_group?.name }}</a></div>\\n                    </ion-item>\\n            </ion-list>\\n            <ion-footer>\\n                <ion-row>\\n                    <ion-col class=\\\"ion-text-center\\\">\\n                        <ion-button color=\\\"success\\\" size=\\\"small\\\" fill=\\\"clear\\\" [routerLink]=\\\"'/settings/' + setting?.id + '/edit'\\\">\\n                            <ion-icon name=\\\"create-outline\\\"></ion-icon>\\n                            <div>Editar</div>\\n                        </ion-button>\\n                    </ion-col>\\n                    <ion-col class=\\\"ion-text-center\\\">\\n                        <ion-button color=\\\"danger\\\" size=\\\"small\\\" fill=\\\"clear\\\" (click)=\\\"settingsService.deleteSetting(setting?.id)\\\">\\n                            <ion-icon name=\\\"trash-outline\\\"></ion-icon>\\n                            <div>Eliminar</div>\\n                        </ion-button>\\n                    </ion-col>\\n                </ion-row>\\n            </ion-footer>\\n        </ion-card>\\n    </ng-container>\\n\\n    <ng-container *ngIf=\\\"!(loading.loading | async) && !settingsService.settings?.length\\\">\\n        <ion-item>\\n            <ion-icon class=\\\"text-warning\\\" name=\\\"warning-outline\\\" slot=\\\"start\\\"></ion-icon>\\n            <ion-label><h2>No se encontraron {{'AJUSTES' | titlecase}}</h2></ion-label>\\n            <ion-button [routerLink]=\\\"'/settings/create'\\\" fill=\\\"outline\\\" color=\\\"success\\\" slot=\\\"end\\\">\\n                Crear {{'AJUSTES' | titlecase}}\\n                <ion-icon name=\\\"add-circle-outline\\\" slot=\\\"end\\\"></ion-icon>\\n            </ion-button>\\n        </ion-item>\\n    </ng-container>\\n\\n</ion-content>\\n\\n<ion-footer class=\\\"lists-footer\\\">\\n    <ion-row *ngIf=\\\"settingsService.meta\\\">\\n        <ion-col class=\\\"ion-text-center\\\" size=\\\"12\\\">\\n            <ion-button (click)=\\\"settingsService.getSettings(settingsService.meta.current_page - 1)\\\"\\n                        [disabled]=\\\"settingsService.meta.current_page == 1\\\"\\n                        fill=\\\"clear\\\">\\n                <ion-icon slot=\\\"end\\\" name=\\\"play-outline\\\" style=\\\"transform: rotate(180deg);\\\"></ion-icon>\\n            </ion-button>\\n            <ion-button fill=\\\"clear\\\" [disabled]=\\\"true\\\"> Pag: {{settingsService.meta.current_page}}\\n                /{{settingsService.meta.last_page}} {{settingsService.meta.from}}-{{settingsService.meta.to}}\\n                /{{settingsService.meta.total}} </ion-button>\\n            <ion-button (click)=\\\"settingsService.getSettings(settingsService.meta.current_page + 1)\\\"\\n                        [disabled]=\\\"settingsService.meta.current_page == settingsService.meta.last_page\\\"\\n                        fill=\\\"clear\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"play-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-col>\\n    </ion-row>\\n</ion-footer>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-button (click)=\\\"closeModal()\\\">\\n                <ion-icon slot=\\\"icon-only\\\"\\n                          [name]=\\\"'arrow-back-outline'\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-buttons slot=\\\"primary\\\">\\n            <ion-button color=\\\"success\\\"\\n                        (click)=\\\"settingsService.saveSetting(); closeModal()\\\"\\n                        [disabled]=\\\"!settingsFormComponent?.settingsForm?.valid\\\">\\n                <ion-icon slot=\\\"icon-only\\\"\\n                          [name]=\\\"'save-outline'\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-title>{{action}} Parametro</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n\\n    <app-settings-form #settingsFormComponent></app-settings-form>\\n\\n</ion-content>\\n\";","export default \"<app-main-header title=\\\"AJUSTES\\\"></app-main-header>\\n\\n<ion-content>\\n\\n        <ion-row>\\n\\n            <ion-col size-md=\\\"3\\\" size-sm=\\\"6\\\" size-xs=\\\"12\\\">\\n                <ion-card routerLink=\\\"/settings/list\\\">\\n                    <div style=\\\"height: 120px; width: 100%; display: flex; align-items: center; justify-content: center;\\\">\\n                        <ion-icon name=\\\"list-circle-outline\\\" color=\\\"primary\\\" class=\\\"icon-m\\\"></ion-icon>\\n                    </div>\\n                    <ion-card-header>\\n                        <ion-card-subtitle class=\\\"ion-text-center\\\">\\n                            Listar {{ 'AJUSTES'  | titlecase }}\\n                        </ion-card-subtitle>\\n                    </ion-card-header>\\n\\n                </ion-card>\\n            </ion-col>\\n\\n            <ion-col size-md=\\\"3\\\" size-sm=\\\"6\\\" size-xs=\\\"12\\\">\\n                <ion-card routerLink=\\\"/settings/create\\\">\\n                    <div style=\\\"height: 120px; width: 100%; display: flex; align-items: center; justify-content: center;\\\">\\n                        <ion-icon name=\\\"add-circle-outline\\\" color=\\\"success\\\" class=\\\"icon-m\\\"></ion-icon>\\n                    </div>\\n                    <ion-card-header>\\n                        <ion-card-subtitle class=\\\"ion-text-center\\\">\\n                            Crear {{ 'AJUSTES' | titlecase }}\\n                        </ion-card-subtitle>\\n                    </ion-card-header>\\n\\n                </ion-card>\\n            </ion-col>\\n\\n        </ion-row>\\n\\n</ion-content>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLWNyZWF0ZS9zZXR0aW5ncy1jcmVhdGUuY29tcG9uZW50LnNjc3MifQ== */\";","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\nimport {SettingsService} from \"../settings.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Setting} from \"../setting\";\nimport {SettingsFormComponent} from \"../settings-form/settings-form.component\";\nimport { Platform } from '@ionic/angular';\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\n\n@Component({\n    selector: 'app-settings-create',\n    templateUrl: './settings-create.component.html',\n    styleUrls: ['./settings-create.component.scss']\n})\nexport class SettingsCreateComponent implements OnInit, AfterViewInit {\n\n    @ViewChild('settingForm') settingForm: SettingsFormComponent;\n\n    id: any = null;\n    public formValid = false;\n\n    constructor(\n        public settingsService: SettingsService,\n        public route: ActivatedRoute,\n        public platform: Platform,\n        public splitPanel: SplitPanelService\n    ) {\n\n    }\n\n    ngOnInit(): void {\n        this.clearPosts();\n    }\n\n    ionViewWillEnter() {\n       this.splitPanel.show.next(true);\n    }\n\n    ngAfterViewInit() {\n        this.settingForm.settingsForm.valueChanges.subscribe((data) => {\n            this.settingsService.settingsFormValid.next(this.settingForm.settingsForm.valid);\n        });\n    }\n\n    clearPosts() {\n        console.log('clear');\n        this.settingsService.createSetting();\n        this.settingsService.setting = <Setting>{};\n    }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLWR1cGxpY2F0ZS9zZXR0aW5ncy1kdXBsaWNhdGUuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-settings-duplicate',\n  templateUrl: './settings-duplicate.component.html',\n  styleUrls: ['./settings-duplicate.component.scss'],\n})\nexport class SettingsDuplicateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLWVkaXQvc2V0dGluZ3MtZWRpdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild, AfterViewInit} from '@angular/core';\nimport {SettingsService} from \"../settings.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Setting} from \"../setting\";\nimport {SettingsFormComponent} from \"../settings-form/settings-form.component\";\nimport { Platform } from '@ionic/angular';\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\n\n@Component({\n  selector: 'app-settings-edit',\n  templateUrl: './settings-edit.component.html',\n  styleUrls: ['./settings-edit.component.scss']\n})\nexport class SettingsEditComponent implements OnInit, AfterViewInit {\n\n    @ViewChild('settingForm') settingForm: SettingsFormComponent;\n\n    public id: any = null;\n    public model: Setting = null;\n\n  constructor(\n      public settingsService: SettingsService,\n      public route: ActivatedRoute,\n      public platform: Platform,\n      public splitPanel: SplitPanelService,\n  ) { }\n\n  ngOnInit(): void {\n      this.id = this.route.snapshot.paramMap.get('id');\n      this.settingsService.editSetting(this.id);\n  }\n\n  ionViewWillEnter() {\n    this.splitPanel.show.next(true);\n  }\n\n  ngAfterViewInit() {\n      this.settingForm.settingsForm.valueChanges.subscribe((data) => {\n          this.settingsService.settingsFormValid.next(this.settingForm.settingsForm.valid);\n      });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLWZvcm0vc2V0dGluZ3MtZm9ybS5jb21wb25lbnQuc2NzcyJ9 */\";","import {AfterViewInit, Component, Input, OnInit, ViewChild} from '@angular/core';\nimport {Setting} from \"../setting\";\nimport {FormGroup} from \"@angular/forms\";\nimport {SettingsService} from \"../settings.service\";\nimport {TitleCasePipe} from \"@angular/common\";\n\n@Component({\n    selector: 'app-settings-form',\n    templateUrl: './settings-form.component.html',\n    styleUrls: ['./settings-form.component.scss']\n})\nexport class SettingsFormComponent implements OnInit, AfterViewInit {\n\n    @Input('model') model: Setting = <Setting>{};\n\n    @ViewChild('settingsForm') settingsForm: FormGroup;\n\n    public validationMessages = {\n        'name': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('NOMBRE') + ' es obligatorio.'},\n        ],\n        'code': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('CÓDIGO') + ' es obligatorio.'},\n        ],\n        'value': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('VALOR') + ' es obligatorio.'},\n        ],\n        'rich_text': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('TEXTO ENRIQUECIDO') + ' es obligatorio.'},\n        ],\n        'setting_group_id': [\n            {type: 'required', message: 'El campo ' + this.toTitlecase.transform('GRUPO') + ' es obligatorio.'},\n        ],\n    };\n\n    constructor(\n        public settingsService: SettingsService,\n        private toTitlecase: TitleCasePipe\n    ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n    }\n\n\n    // set setSettingGroupId\n\n    setSettingGroupId(event: any) {\n        this.settingsService.setting.setting_group_id = event.value ? event.value.id : null;\n    }\n    // end setSettingGroupId\n\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLWxpc3Qvc2V0dGluZ3MtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\";","import {Component, OnInit, ViewChild} from '@angular/core';\nimport { SettingsService} from \"../settings.service\";\nimport {ApiService} from \"../../@shared/services/api.service\";\nimport {LoadingService} from \"../../@shared/services/loading.service\";\nimport {IonContent} from '@ionic/angular';\nimport {SplitPanelService} from \"../../@shared/services/split-panel.service\";\n\n@Component({\n    selector: 'app-settings-list',\n    templateUrl: './settings-list.component.html',\n    styleUrls: ['./settings-list.component.scss'],\n})\nexport class SettingsListComponent implements OnInit {\n\n    @ViewChild(IonContent, {static: false}) content: IonContent;\n\n    popover: any;\n\n    constructor(\n        public settingsService: SettingsService,\n        public api: ApiService,\n        public loading: LoadingService,\n        public splitPanel: SplitPanelService,\n    ) {\n    }\n\n    ngOnInit() {\n        this.settingsService.getSettings();\n    }\n\n    ionViewWillEnter() {\n     this.splitPanel.show.next(true);\n    }\n\n    public scrollToTop() {\n        this.content.scrollToTop(300);\n    }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLW1vZGFsL3NldHRpbmdzLW1vZGFsLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport {ModalController, NavParams} from \"@ionic/angular\";\nimport {SettingsService} from \"../settings.service\";\n\n@Component({\n  selector: 'app-settings-modal',\n  templateUrl: './settings-modal.component.html',\n  styleUrls: ['./settings-modal.component.scss'],\n})\nexport class SettingsModalComponent implements OnInit {\n\n  action: string;\n\n  constructor(\n      private modalController: ModalController,\n      private navParams: NavParams,\n      public settingsService: SettingsService\n  ) { }\n\n  ngOnInit() {\n    this.action = this.navParams.data.action;\n  }\n\n  async closeModal() {\n    const onClosedData: string = \"Wrapped Up!\";\n    await this.modalController.dismiss(onClosedData);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingsPage } from './settings.page';\nimport {SettingsEditComponent} from \"./settings-edit/settings-edit.component\";\nimport {SettingsCreateComponent} from \"./settings-create/settings-create.component\";\nimport {SettingsListComponent} from \"./settings-list/settings-list.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: SettingsPage\n    },\n    {\n        path: 'list',\n        component: SettingsListComponent\n    },\n    {\n      path: 'create',\n      component: SettingsCreateComponent\n    },\n    {\n        path: ':id/edit',\n        component: SettingsEditComponent\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [\n    RouterModule\n  ],\n})\nexport class SettingsPageRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {SharedModule} from '../@shared/shared.module';\n\nimport {SettingsPageRoutingModule} from './settings-routing.module';\n\nimport { SettingsPage} from './settings.page';\nimport { SettingsListComponent} from \"./settings-list/settings-list.component\";\nimport { SettingsCreateComponent} from \"./settings-create/settings-create.component\";\nimport { SettingsDuplicateComponent} from \"./settings-duplicate/settings-duplicate.component\";\nimport { SettingsEditComponent} from \"./settings-edit/settings-edit.component\";\nimport { SettingsFormComponent} from \"./settings-form/settings-form.component\";\nimport {SettingsModalComponent} from \"./settings-modal/settings-modal.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        SharedModule,\n        SettingsPageRoutingModule\n    ],\n    declarations: [\n        SettingsPage,\n        SettingsListComponent,\n        SettingsCreateComponent,\n        SettingsDuplicateComponent,\n        SettingsEditComponent,\n        SettingsFormComponent,\n        SettingsModalComponent,\n    ]\n})\nexport class SettingsPageModule {\n}\n\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport {SplitPanelService} from \"../@shared/services/split-panel.service\";\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPage implements OnInit {\n\n  constructor(\n    public splitPanel: SplitPanelService\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n  ionViewWillEnter() {\n    this.splitPanel.show.next(true);\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {ApiService} from \"../@shared/services/api.service\";\nimport { Setting, SettingLists } from \"./setting\";\nimport {Meta} from \"../@shared/interfaces/meta\";\nimport {AlertService} from \"../@shared/services/alert.service\";\nimport {ToastService} from \"../@shared/services/toast.service\";\nimport {NavigationService} from '../@shared/services/navigation.service'\nimport {BehaviorSubject} from \"rxjs\";\n\ndeclare var $: any;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SettingsService {\n\n    public settingsUrl = 'settings';\n    public settingsFormValid = new BehaviorSubject<boolean>(false);\n\n    public settings: Setting[] = [];\n    public setting: Setting = <Setting>{};\n    public settingLists: SettingLists = {};\n\n    public searchValue = '';\n    public perPage = 10;\n\n    public meta: Meta = null;\n\n    public page = 1;\n\n    public pagesContent = document.getElementById('pages-content');\n\n    constructor(\n        public api: ApiService,\n        public alert: AlertService,\n        public toast: ToastService,\n        public router: Router,\n        private navigation: NavigationService,\n    ) {\n    }\n\n    public getSettings(page: any = this.page, perPage: any = this.perPage) {\n\n        this.api.get(this.settingsUrl + '?page=' + page + '&perPage=' + perPage + '&q[name:cont]=' + this.searchValue)\n            .subscribe(\n                (res: any) => {\n                    // @ts-ignore\n                    document.getElementById('pages-content').scrollToTop(300);\n                    this.settings = res.data;\n                    this.settingLists = res.lists;\n                    this.meta = res.meta;\n                },\n                (err: any) => {\n                    console.error(err);\n                }\n            );\n    }\n\n    public editSetting(id: any) {\n        this.api.get(this.settingsUrl + '/' + id + '/edit')\n            .subscribe(\n                (res: any) => {\n                    this.setting = res.data.model;\n                    this.settingLists = res.lists;\n                },\n                (err: any) => {\n                    console.error(err);\n                }\n            );\n    }\n\n    public updateSetting() {\n        this.api.put(this.settingsUrl + '/' + this.setting.id, {\n            model: this.setting,\n            pivots: {\n            }\n        }).subscribe(\n            (res: any) => {\n                this.toast.present(res.message, 'toast-success', 'top');\n                this.navigation.back();\n                this.getSettings(1);\n            }\n        );\n    }\n\n    public createSetting() {\n        this.api.get(this.settingsUrl + '/create')\n            .subscribe(\n                (res: any) => {\n                    this.setting = <Setting>{};\n                    this.settingLists = res.lists\n                }\n            );\n    }\n\n    public storeSetting() {\n        this.api.post(this.settingsUrl, {\n            model: this.setting,\n            pivots: {\n            }\n        }).subscribe(\n            (res: any) => {\n                this.toast.present(res.message, 'toast-success', 'top');\n                this.navigation.back();\n                this.getSettings(1);\n            }\n        );\n    }\n\n    public async deleteSetting(id: any) {\n        const confirm = await this.alert.confirmation(\n            'Desea eliminar el item?'\n        );\n        if (confirm) {\n            this.api.delete(this.settingsUrl + '/' + id, {})\n                .subscribe(\n                    (res: any) => {\n                        this.toast.present(res.message, 'toast-success', 'top');\n                        this.getSettings(1);\n                    }\n                );\n        } else {\n            return;\n        }\n    }\n\n\n    saveSetting() {}\n\n}\n"]}